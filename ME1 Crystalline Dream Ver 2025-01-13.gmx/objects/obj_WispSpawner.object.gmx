<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Red = 250
Green = 250
Blue = 100
Enemyinstance = obj_Stage1Firefly1
Colour = make_colour_rgb(Red, Green, Blue)

Startscale = 7
BigEffectScale = Startscale
BEffAlpha = 0

SpriteAlpha = 0

NoOfEff = 10
EffCount = 0

EnemySpawned = false
repeat(NoOfEff)
{
    StartRadius[EffCount] = random_range(50,100)
    Radius[EffCount] = StartRadius[EffCount]
    AppAng[EffCount] = random(360)
    AppAngDir[EffCount] = random_range(-3,3)
    EffCount += 1
}
EffCount = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Colour = make_colour_rgb(Red, Green, Blue)

EffCount = 0

if Radius[EffCount] &gt; 10
{
    if SpriteAlpha &lt; 0.8
    {
        SpriteAlpha += 0.8/80
    }
}
    


repeat(NoOfEff)
{
    ParticleX[EffCount] = lengthdir_x(Radius[EffCount], AppAng[EffCount])
    ParticleY[EffCount] = lengthdir_y(Radius[EffCount], AppAng[EffCount])

    AppAng[EffCount] += AppAngDir[EffCount]
    
    if Radius[EffCount] &gt; 10
    {
        Radius[EffCount] -= StartRadius[EffCount]/80
    }
    else
    {
        if EnemySpawned = false
        {
            EnemyObject = instance_create(x, y, Enemyinstance)
            EnemyObject.Red = Red
            EnemyObject.Green = Green
            EnemyObject.Blue = Blue
            EnemyObject.Colour = make_colour_rgb(Red, Green, Blue)
            EnemyObject.direction = direction
            EnemySpawned = true
        }
        if SpriteAlpha &gt; 0
        {
            SpriteAlpha -= 0.8/80
        }
        else
        {
            instance_destroy()
        }
    }
    
    draw_set_blend_mode(bm_add)
    draw_sprite_ext(spr_EnemyFirefly, 0, x+ParticleX[EffCount], y+ParticleY[EffCount], 0.5, 0.5, 0, Colour, SpriteAlpha)
    draw_set_blend_mode(bm_normal)
    
    EffCount += 1
}
if BigEffectScale &gt; 0
{
        BigEffectScale -= Startscale/80
}
if BEffAlpha &lt; 0.5
{
    BEffAlpha += 0.5/30
}
draw_set_blend_mode(bm_add)
draw_sprite_ext(spr_EnemyFirefly, 0, x, y, BigEffectScale, BigEffectScale, 0, Colour, BEffAlpha)
draw_set_blend_mode(bm_normal)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
