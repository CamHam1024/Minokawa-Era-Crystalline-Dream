<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_OptionsIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vari init

global.Pause = false
PauseBuffer = false
PauseTimer = 0
Surface = surface_create(1024, 768)

Phase = 0
Deployed = false
PauseWaitTimer = 0

//Animation settings
SetOnceSwitch = false

Reset = false
BackAlpha = 0
MaxPropMove = 300
PropMove = MaxPropMove

PauseAlpha = 0
TextDistence = 2000
Textswitch = false

XPosMove = 50
PauseXPos = XPosMove

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Option Variables
//Standard draw
MenuSelected = 0
OptionNumber = 0
NoOfOptions = 6
OptionY = 280

inn = 0
n = 0

Mincol = 0
Maxcol = 255

Mincol1 = 100
Maxcol1 = 200

repeat(NoOfOptions)
{
    MoveSpeed = 10
    OptionX[inn] = 0
    inn += 1
}
//Menu Options
Fullscreen = false
SettingsSelected = false
WaitingTime = 8


Val[0] = Maxcol
Val[1] = Mincol
Val[2] = Mincol
Val[3] = Mincol
Val[4] = Mincol
Val[5] = Mincol

Val1[0] = Maxcol1
Val1[1] = Mincol1
Val1[2] = Mincol1
Val1[3] = Mincol1
Val1[4] = Mincol1
Val1[5] = Mincol1

//Menu Animation
Selected = false
SelectedWait = 0

ValTimer = 0
ValChange = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Surface stuff
if !surface_exists(Surface)
{
    Surface = surface_create(1024, 768)
}

if global.Pause = false
{
    instance_activate_all()
    audio_resume_all()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Val Changer
if ValChange = 0
    {
        Val[OptionNumber] = Maxcol
        Val1[OptionNumber] = Maxcol1
    }

    if ValChange = 1
    {
        Val[OptionNumber] = 0
        Val1[OptionNumber] = 100
    }

    if Selected = true
    {
        ValTimer += 1
        ValTimer = ValTimer % 3
        if ValTimer = 1
        {
            ValChange = !ValChange
        }
    }
    else
    {
        SelectedWait = 0
        ValTimer = 0
        ValChange = 0
    }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Events
if global.Pause = true
{
    if Selected = true
    {
        // Menu 1 Events================
        if MenuSelected = 0
        {
            if OptionNumber = 0
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    SelectedWait = 0
                    Reset = true
                }
            }
            
            if OptionNumber = 1
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    Selected = false
                    OptionNumber = 0
                    MenuSelected = 1
                    SelectedWait = 0
                }
            }
            
            if OptionNumber = 2
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    Selected = false
                    MenuSelected = 2
                    OptionNumber = 0
                    SelectedWait = 0
                }
            }
            
            if OptionNumber = 3
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    Selected = false
                    MenuSelected = 3
                    OptionNumber = 0
                    SelectedWait = 0
                }
            }
        }
       
       // Menu 2 Events================
        if MenuSelected = 1
        {
            if OptionNumber = 0 //BGM
            {
                //Go to line 190
            }
            
            if OptionNumber = 1 //SFX
            {
                //Go to line 190
            }
            
            if OptionNumber = 2 //Viewing Style
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    global.Fullscreen =! global.Fullscreen
                    window_set_fullscreen(global.Fullscreen)
                    Selected = false
                    SelectedWait = 0
                }
            }
            
            if OptionNumber = 3 // Defaults
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    global.VolBGM = global.DefaultBGM
                    global.VolSFX = global.DefaultSFX
                    global.Fullscreen = global.DefaultScreen
                    window_set_fullscreen(global.Fullscreen)
                    Selected = false
                }
            }
            
            if OptionNumber = 4 // Manual
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    Selected = false
                    SelectedWait = 0
                }
            }
            
            if OptionNumber = 5 //Back
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    //Save Settings
                    ini_open("Settings.ini")
                    ini_write_real("Options", "BGMVol", global.VolBGM)
                    ini_write_real("Options", "SFXVol", global.VolSFX)
                    ini_write_real("Options", "FullScreen", global.Fullscreen)
                    ini_close()
                    
                    Selected = false
                    OptionNumber = 0
                    MenuSelected = 0
                    SelectedWait = 0
                }
            }
        }
        // Menu 3 (Start Over) Events================
        if MenuSelected = 2
        {
            if OptionNumber = 0
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    Selected = false //(Place Holder)
                    game_restart()
                }
            }
            
            if OptionNumber = 1
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    Selected = false
                    OptionNumber = 0
                    MenuSelected = 0
                    SelectedWait = 0
                }
            }
        }
       
       // Menu 4 (Quit) Events================
        if MenuSelected = 3
        {
            if OptionNumber = 0
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    Selected = false //(Place Holder)
                    obj_CloudCurtains.GoBackTrans = true
                }
            }
            
            if OptionNumber = 1
            {
                if SelectedWait &lt; 20
                {
                    SelectedWait += 1
                }
                else
                {
                    Selected = false
                    OptionNumber = 0
                    MenuSelected = 0
                    SelectedWait = 0
                }
            }
        }
    }
}

//Sound Options
if MenuSelected = 1
{
    if OptionNumber = 0 //BGM
    {
        ValChange = 0
        Selected = false
        if keyboard_check_pressed(vk_right)
        {
            if global.VolBGM &lt; 1
            {
                SFX = snd_MenuJingle
                audio_play_sound(SFX, 0, 0)
                audio_sound_gain(SFX, global.VolSFX, 0)
                
                global.VolBGM += 0.1
            }
        }
                    
        if keyboard_check_pressed(vk_left)
        {
            if global.VolBGM &gt; 0
            {
                SFX = snd_MenuJingle
                audio_play_sound(SFX, 0, 0)
                audio_sound_gain(SFX, global.VolSFX, 0)
                
                global.VolBGM -= 0.1
            }
            else
            {
                global.VolBGM = 0
            }
        }
    }
            
    if OptionNumber = 1 //SFX
    {
        ValChange = 0
        Selected = false
        if keyboard_check_pressed(vk_right)
        {
            if global.VolSFX &lt; 1
            {
                SFX = snd_MenuJingle
                audio_play_sound(SFX, 0, 0)
                audio_sound_gain(SFX, global.VolSFX, 0)
                
                global.VolSFX += 0.1
            }
        }
                    
        if keyboard_check_pressed(vk_left)
        {
            if global.VolSFX &gt; 0
            {
                SFX = snd_MenuJingle
                audio_play_sound(SFX, 0, 0)
                audio_sound_gain(SFX, global.VolSFX, 0)
                
                global.VolSFX -= 0.1
            }
            else
            {
                global.VolSFX = 0
            }
        }
    }
}
            
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Scrolling
if global.Pause = true and Selected = false
{
    if WaitingTime = 0
    {
        if keyboard_check(vk_up)
        {
            if OptionNumber &gt; 0
            {
                Play_Sound_Fancy(snd_MenuJingle,global.VolSFX/2)
            
                WaitingTime = 10
                OptionNumber -= 1
            }
        }
    
        if keyboard_check(vk_down)
        {
            if OptionNumber &lt; NoOfOptions-1
            {
                Play_Sound_Fancy(snd_MenuJingle,global.VolSFX/2)
            
                WaitingTime = 10
                OptionNumber += 1
            }
        }
        
            if keyboard_check_pressed(ord("Z"))
            {
                Play_Sound_Fancy(snd_OptionSelected,global.VolSFX/2)
                
                
                WaitingTime = 10
                Selected = true
            }
    }
    else
    {
        WaitingTime -= 1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Stuff
if global.Pause = true
{
        PauseBuffer = true
        draw_set_blend_mode_ext(bm_one, bm_zero)
        draw_surface_part_ext(Surface, 0, 0, 1024, 768, 0, 0, 1, 1, c_white, 1)
        draw_set_blend_mode(bm_normal)
}
    
if keyboard_check_pressed(vk_escape)
    {
        
        if global.Pause = false
        {
            instance_deactivate_all(true)
            instance_activate_object(obj_System)
            instance_activate_object(obj_CloudCurtains)
            instance_activate_object(obj_GameHUD)
            instance_activate_object(obj_DrawSurfaceStart)
            audio_pause_all()
        }
        
        
        surface_set_target(Surface)
        draw_clear_alpha(0, 0)
        draw_enable_alphablend(false)
        draw_surface_part_ext(application_surface,  0, 0, 1024, 768, 0, 0, 1, 1, c_white, 1)
        draw_enable_alphablend(true)
        surface_reset_target()
    }

    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deply Animation
if PauseWaitTimer &gt; 0
{
    PauseWaitTimer -= 1
}

if keyboard_check_pressed(vk_escape)
{
    if PauseWaitTimer = 0
    {
        if global.Pause = false
        {
            PauseWaitTimer = 60
            SetOnceSwitch = false
            global.Pause = true //!global.Pause spr_PauseProp1
        }
    }
}

if global.Pause = true
{
    if Reset = false
    {
        if SetOnceSwitch = false
        {
            Deplyspeed = 15
            PauseWaitTimer = Deplyspeed
            SetOnceSwitch = true
        }
        //Background
        draw_sprite_ext(spr_Blackbacker, 0,0, 0, 1, 1, 0, c_white, BackAlpha)
        if BackAlpha &lt; 0.5
        {
            BackAlpha += 0.5/Deplyspeed
        }
        
        //Props
        draw_sprite_ext(spr_PauseProp1, 0, 0-PropMove, 768/2, 1, 1, 0, c_white, 0.7)
        
        if PropMove &gt; 0
        {
            PropMove -= MaxPropMove/Deplyspeed
        }
        
        //Text
        
        draw_text_outline_coloured(20+PauseXPos, 200, string(MenuName), c_white ,c_white ,c_ltgray ,c_ltgray , c_black, 1, ft_PauseMenuFont, PauseAlpha)
        if PauseAlpha &lt; 1
        {
            PauseAlpha += 1/Deplyspeed
        }
        
        if PauseXPos &gt; 0
        {
            PauseXPos -= XPosMove/Deplyspeed
        }
    }
    else
    {
        //All variables reset when unpaused
        OptionNumber = 0
        Selected = false
        XPosMove = 50
        PauseXPos = XPosMove
        PauseAlpha = 0
        MaxPropMove = 300
        Reset = false
        PropMove = MaxPropMove
        BackAlpha = 0
        global.Pause = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_OldPause</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause Menu 1
//Initial Draw 200,75, 255

if MenuSelected = 0
{
    //Init
    MenuName = "Paused!"
    NoOfOptions = 4
    
    OptionName[0] = "Resume Dreaming.." 
    OptionName[1] = "Dream Conditions.." 
    OptionName[2] = "Restart Dream.." 
    OptionName[3] = "Dream another day.." 

    OptionDesc[0] = "Continue"
    OptionDesc[1] = "Settings"
    OptionDesc[2] = "Start Over"
    OptionDesc[3] = "Quit Game"
    
    //menu render    
    repeat(NoOfOptions)
    {
        draw_text_outline_coloured(20+OptionX[n], OptionY, string(OptionName[n]), make_colour_hsv(75,75, Val[n]) ,make_colour_hsv(75,75, Val[n]) ,make_colour_hsv(0, 0, Val1[n]) ,make_colour_hsv(0, 0, Val1[n]) , c_black, 1, ft_PauseMenuFontOptions, PauseAlpha)
        draw_text_outline_coloured(20+OptionX[n], OptionY-25, string(OptionDesc[n]), make_colour_hsv(200,75, Val[n]) ,make_colour_hsv(200,75, Val[n]) ,make_colour_hsv(0, 0, Val1[n]) ,make_colour_hsv(0, 0, Val1[n]) , c_black, 1, ft_PauseMenuFontOptionsDesc, PauseAlpha)
        OptionY += 50
        n += 1
    }
    n = 0
    OptionY = 280


    //Menu Options
    if OptionNumber = 0
    {  
       if OptionX[OptionNumber] &lt; 25
       {
            OptionX[OptionNumber] += 25/MoveSpeed
            Val[OptionNumber] = Maxcol
            Val1[OptionNumber] = Maxcol1
       }
    
       if OptionX[OptionNumber+1] &gt; 0
       {
            OptionX[OptionNumber+1] -= 25/MoveSpeed
            Val[OptionNumber+1] = Mincol
            Val1[OptionNumber+1] = Mincol1
       }
    
       if OptionX[OptionNumber+2] &gt; 0
       {
            OptionX[OptionNumber+2] -= 25/MoveSpeed
            Val[OptionNumber+2] = Mincol
            Val1[OptionNumber+2] = Mincol1
       }
    
       if OptionX[NoOfOptions-1] &gt; 0
       {
            OptionX[NoOfOptions-1] -= 25/MoveSpeed
            Val[NoOfOptions-1] = Mincol
            Val1[NoOfOptions-1] = Mincol1
       }
    }

    if OptionNumber &gt; 0 and OptionNumber &lt; NoOfOptions-1
    {
        if OptionX[OptionNumber] &lt; 25
        {
            OptionX[OptionNumber] += 25/MoveSpeed
            Val[OptionNumber] = Maxcol
            Val1[OptionNumber] = Maxcol1
        }
    
        if OptionX[OptionNumber+1] &gt; 0
        {
            OptionX[OptionNumber+1] -= 25/MoveSpeed
            Val[OptionNumber+1] = Mincol
            Val1[OptionNumber+1] = Mincol1
        }
    
        if OptionX[OptionNumber-1] &gt; 0
        {
            OptionX[OptionNumber-1] -= 25/MoveSpeed
            Val[OptionNumber-1] = Mincol
            Val1[OptionNumber-1] = Mincol1
        }
    }

    if OptionNumber = NoOfOptions-1
    {
        if OptionX[OptionNumber] &lt; 25
        {
            OptionX[OptionNumber] += 25/MoveSpeed
            Val[OptionNumber] = Maxcol
            Val1[OptionNumber] = Maxcol1
        }
    
        if OptionX[OptionNumber-1] &gt; 0
        {   
            OptionX[OptionNumber-1] -= 25/MoveSpeed
            Val[OptionNumber-1] = Mincol
            Val1[OptionNumber-1] = Mincol1
        }
    
        if OptionX[OptionNumber-2] &gt; 0
        {
            OptionX[OptionNumber-2] -= 25/MoveSpeed
            Val[OptionNumber-2] = Mincol
            Val1[OptionNumber-2] = Mincol1
        }
    
        if OptionX[0] &gt; 0
        {
            OptionX[0] -= 25/MoveSpeed
            Val[0] = Mincol
            Val1[0] = Mincol1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_OldPause</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause Menu 2
//Initial Draw 200,75, 255

if MenuSelected = 1
{
    //Init
    MenuName = "Settings!"
    NoOfOptions = 6
    BGMDisplay = string_format(global.VolBGM*100, 3, 0)
    SFXDisplay = string_format(global.VolSFX*100, 3, 0)
    
    if OptionNumber = 0
    {
        OptionName[0] = "&lt; "+string(BGMDisplay)+"%"+" &gt;" 
        OptionName[1] = string(SFXDisplay)+"%"
    }
    else if OptionNumber = 1
    {
        OptionName[0] = string(BGMDisplay)+"%"
        OptionName[1] = "&lt; "+string(SFXDisplay)+"%"+" &gt;"
    }
    else
    {
        OptionName[0] = string(BGMDisplay)+"%"
        OptionName[1] = string(SFXDisplay)+"%"
    }
    if global.Fullscreen = false {OptionName[2] = "Windowed mode."}else{OptionName[2] = "FullScreen mode."}
    OptionName[3] = "Reset to defaults..." 
    OptionName[4] = "Veiw the game rules..." 
    OptionName[5] = "Save and go back..." 
    
    OptionDesc[0] = "BGM Volume" 
    OptionDesc[1] = "SFX Volume" 
    OptionDesc[2] = "Viewing Style" 
    OptionDesc[3] = "Defaults" 
    OptionDesc[4] = "Manual" 
    OptionDesc[5] = "Back" 
    
    //menu render    
    repeat(NoOfOptions)
    {
        draw_text_outline_coloured(20+OptionX[n], OptionY, string(OptionName[n]), make_colour_hsv(75,75, Val[n]) ,make_colour_hsv(75,75, Val[n]) ,make_colour_hsv(0, 0, Val1[n]) ,make_colour_hsv(0, 0, Val1[n]) , c_black, 1, ft_PauseMenuFontOptions, PauseAlpha)
        draw_text_outline_coloured(20+OptionX[n], OptionY-25, string(OptionDesc[n]), make_colour_hsv(200,75, Val[n]) ,make_colour_hsv(200,75, Val[n]) ,make_colour_hsv(0, 0, Val1[n]) ,make_colour_hsv(0, 0, Val1[n]) , c_black, 1, ft_PauseMenuFontOptionsDesc, PauseAlpha)
        OptionY += 50
        n += 1
    }
    n = 0
    OptionY = 280


    //Menu Options
    if OptionNumber = 0
    {  
       if OptionX[OptionNumber] &lt; 25
       {
            OptionX[OptionNumber] += 25/MoveSpeed
            Val[OptionNumber] = Maxcol
            Val1[OptionNumber] = Maxcol1
       }
    
       if OptionX[OptionNumber+1] &gt; 0
       {
            OptionX[OptionNumber+1] -= 25/MoveSpeed
            Val[OptionNumber+1] = Mincol
            Val1[OptionNumber+1] = Mincol1
       }
    
       if OptionX[OptionNumber+2] &gt; 0
       {
            OptionX[OptionNumber+2] -= 25/MoveSpeed
            Val[OptionNumber+2] = Mincol
            Val1[OptionNumber+2] = Mincol1
       }
    
       if OptionX[NoOfOptions-1] &gt; 0
       {
            OptionX[NoOfOptions-1] -= 25/MoveSpeed
            Val[NoOfOptions-1] = Mincol
            Val1[NoOfOptions-1] = Mincol1
       }
    }

    if OptionNumber &gt; 0 and OptionNumber &lt; NoOfOptions-1
    {
        if OptionX[OptionNumber] &lt; 25
        {
            OptionX[OptionNumber] += 25/MoveSpeed
            Val[OptionNumber] = Maxcol
            Val1[OptionNumber] = Maxcol1
        }
    
        if OptionX[OptionNumber+1] &gt; 0
        {
            OptionX[OptionNumber+1] -= 25/MoveSpeed
            Val[OptionNumber+1] = Mincol
            Val1[OptionNumber+1] = Mincol1
        }
    
        if OptionX[OptionNumber-1] &gt; 0
        {
            OptionX[OptionNumber-1] -= 25/MoveSpeed
            Val[OptionNumber-1] = Mincol
            Val1[OptionNumber-1] = Mincol1
        }
    }

    if OptionNumber = NoOfOptions-1
    {
        if OptionX[OptionNumber] &lt; 25
        {
            OptionX[OptionNumber] += 25/MoveSpeed
            Val[OptionNumber] = Maxcol
            Val1[OptionNumber] = Maxcol1
        }
    
        if OptionX[OptionNumber-1] &gt; 0
        {   
            OptionX[OptionNumber-1] -= 25/MoveSpeed
            Val[OptionNumber-1] = Mincol
            Val1[OptionNumber-1] = Mincol1
        }
    
        if OptionX[OptionNumber-2] &gt; 0
        {
            OptionX[OptionNumber-2] -= 25/MoveSpeed
            Val[OptionNumber-2] = Mincol
            Val1[OptionNumber-2] = Mincol1
        }
    
        if OptionX[0] &gt; 0
        {
            OptionX[0] -= 25/MoveSpeed
            Val[0] = Mincol
            Val1[0] = Mincol1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_OldPause</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause Menu 3
//Initial Draw 200,75, 255

if MenuSelected = 2
{
    MenuName = "Starting over?"
    NoOfOptions = 2

    OptionName[0] = "Yes, i'm Okay with that!" 
    OptionName[1] = "I did a whoopie.." 
    OptionName[2] = "" 
    OptionName[3] = "" 
    
    OptionDesc[0] = "Yes yes!"
    OptionDesc[1] = "No hold up!"
    OptionDesc[2] = ""
    OptionDesc[3] = ""
    repeat(NoOfOptions)
    {
        draw_text_outline_coloured(20, 230, "(All Progress will be lost if you do!)", c_white ,c_white ,c_red ,c_red , c_black, 1, ft_PauseMenuFontOptions, 1)
        
        draw_text_outline_coloured(20+OptionX[n], OptionY, string(OptionName[n]), make_colour_hsv(75,75, Val[n]) ,make_colour_hsv(75,75, Val[n]) ,make_colour_hsv(0, 0, Val1[n]) ,make_colour_hsv(0, 0, Val1[n]) , c_black, 1, ft_PauseMenuFontOptions, PauseAlpha)
        draw_text_outline_coloured(20+OptionX[n], OptionY-25, string(OptionDesc[n]), make_colour_hsv(200,75, Val[n]) ,make_colour_hsv(200,75, Val[n]) ,make_colour_hsv(0, 0, Val1[n]) ,make_colour_hsv(0, 0, Val1[n]) , c_black, 1, ft_PauseMenuFontOptionsDesc, PauseAlpha)
        OptionY += 50
        n += 1
    }
    n = 0
    OptionY = 280

    //Menu Options
    if OptionNumber = 0
    {  
       if OptionX[OptionNumber] &lt; 25
       {
            OptionX[OptionNumber] += 25/MoveSpeed
            Val[OptionNumber] = Maxcol
            Val1[OptionNumber] = Maxcol1
       }
    
       if OptionX[NoOfOptions-1] &gt; 0
       {
            OptionX[NoOfOptions-1] -= 25/MoveSpeed
            Val[NoOfOptions-1] = Mincol
            Val1[NoOfOptions-1] = Mincol1
       }
    }

    if OptionNumber = NoOfOptions-1
    {
        if OptionX[OptionNumber] &lt; 25
        {
            OptionX[OptionNumber] += 25/MoveSpeed
            Val[OptionNumber] = Maxcol
            Val1[OptionNumber] = Maxcol1
        }
    
        if OptionX[0] &gt; 0
        {
            OptionX[0] -= 25/MoveSpeed
            Val[0] = Mincol
            Val1[0] = Mincol1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_OldPause</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause Menu 4
//Initial Draw 200,75, 255

if MenuSelected = 3
{
    MenuName = "Wanting to Quit??"
    NoOfOptions = 2

    OptionName[0] = "mhm! I wana do something else!" 
    OptionName[1] = "I didnt mean to push that!" 
    OptionName[2] = "" 
    OptionName[3] = "" 
    
    OptionDesc[0] = "Yep!"
    OptionDesc[1] = "NOOO!"
    OptionDesc[2] = ""
    OptionDesc[3] = ""
    repeat(NoOfOptions)
    {
        draw_text_outline_coloured(20, 230, "(All Progress will be lost if you do!)", c_white ,c_white ,c_red ,c_red , c_black, 1, ft_PauseMenuFontOptions, 1)
        
        draw_text_outline_coloured(20+OptionX[n], OptionY, string(OptionName[n]), make_colour_hsv(75,75, Val[n]) ,make_colour_hsv(75,75, Val[n]) ,make_colour_hsv(0, 0, Val1[n]) ,make_colour_hsv(0, 0, Val1[n]) , c_black, 1, ft_PauseMenuFontOptions, PauseAlpha)
        draw_text_outline_coloured(20+OptionX[n], OptionY-25, string(OptionDesc[n]), make_colour_hsv(200,75, Val[n]) ,make_colour_hsv(200,75, Val[n]) ,make_colour_hsv(0, 0, Val1[n]) ,make_colour_hsv(0, 0, Val1[n]) , c_black, 1, ft_PauseMenuFontOptionsDesc, PauseAlpha)
        OptionY += 50
        n += 1
    }
    n = 0
    OptionY = 280

    //Menu Options
    if OptionNumber = 0
    {  
       if OptionX[OptionNumber] &lt; 25
       {
            OptionX[OptionNumber] += 25/MoveSpeed
            Val[OptionNumber] = Maxcol
            Val1[OptionNumber] = Maxcol1
       }
    
       if OptionX[NoOfOptions-1] &gt; 0
       {
            OptionX[NoOfOptions-1] -= 25/MoveSpeed
            Val[NoOfOptions-1] = Mincol
            Val1[NoOfOptions-1] = Mincol1
       }
    }

    if OptionNumber = NoOfOptions-1
    {
        if OptionX[OptionNumber] &lt; 25
        {
            OptionX[OptionNumber] += 25/MoveSpeed
            Val[OptionNumber] = Maxcol
            Val1[OptionNumber] = Maxcol1
        }
    
        if OptionX[0] &gt; 0
        {
            OptionX[0] -= 25/MoveSpeed
            Val[0] = Mincol
            Val1[0] = Mincol1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
