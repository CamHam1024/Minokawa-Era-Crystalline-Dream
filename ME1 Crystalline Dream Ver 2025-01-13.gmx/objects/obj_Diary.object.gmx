<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MenuIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Base variables
KillSwitch = false
MenuAvali = false
Scale = 0

OptionNumber = 0
Opt = 0

DiaryMenu = "Index"
MenuMaxOptions = 4

OptionName[0] = "Music Records"
OptionName[1] = "Score Boards"
OptionName[2] = "Replays"
OptionName[3] = "Spellcard Collection"
OptionName[4] = "Exit"


StartXpos = 110
StartYpos = 150
color = make_colour_rgb(234, 199, 255)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music Record Variables
cassetDeployed = false

CasScale = 2
CasAlpha = 0

CasRot = 0
CasPartEmit = 0

ArtistDesc[0] = "I am a Burger!"
ArtistDesc[1] = "Tenno, Why are you a burger?"
ArtistDesc[2] = "Because you left me"
ArtistDesc[3] = "I had to tenno..."
ArtistDesc[4] = "I had to for your Safety"
ArtistDesc[5] = "Dont give me that."
ArtistDesc[6] = "You left me becasue you where looking#for sentient sausages"
ArtistDesc[7] = "Beacon"
ArtistDesc[8] = "Game over"

//Full game
/*
ArtistDesc[9] = ""
ArtistDesc[10] = ""
ArtistDesc[11] = ""
ArtistDesc[12] = ""
ArtistDesc[13] = ""
ArtistDesc[14] = ""
ArtistDesc[15] = ""
ArtistDesc[16] = ""
ArtistDesc[17] = ""
ArtistDesc[18] = ""
ArtistDesc[19] = ""
ArtistDesc[20] = ""
ArtistDesc[21] = ""
ArtistDesc[22] = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_MainMenu)
{
    with(obj_MainMenu)
    {
        //OptionNumber = OptionNumber
        SelectActive = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Values
if KillSwitch = false //if the  Exit Button is pressed
{
    //Menu scrolling (Index) (ScoreBoard)
    if DiaryMenu = "Index" or DiaryMenu = "Scoreboards"
    {
        if keyboard_check_pressed(vk_down)
        {
            if OptionNumber &lt; MenuMaxOptions
            {
                OptionNumber += 1
            }
        }

        if keyboard_check_pressed(vk_up)
        {
            if OptionNumber &gt; 0
            {
                OptionNumber -= 1
            }
        }
    }
    
    //Menu scrolling (Music records)
    if DiaryMenu = "Music Records"
    {
        if keyboard_check_pressed(vk_left)
        {
            if OptionNumber &gt; 0
            {
                OptionNumber -= 1
            }
            else
            {
                OptionNumber = MenuMaxOptions
            }
        }
                
        if keyboard_check_pressed(vk_right)
        {
            if OptionNumber &lt; MenuMaxOptions
            {
                OptionNumber += 1
            }
            else
            {
                OptionNumber = 0
            }
        }
                
        if keyboard_check_pressed(vk_up)
        {
            if OptionNumber &gt; 4
            {
                OptionNumber -= 5
            }
            //else
            //{
            //    OptionNumber = 0
            //}
        }
                
        if keyboard_check_pressed(vk_down)
        {
            if OptionNumber &lt; MenuMaxOptions-4
            {
                OptionNumber += 5
            }
            //else
            //{
            //    OptionNumber = MenuMaxOptions
            //}
        }
    }
    
    //=========================
    //=== When Z is pressed =====
    if keyboard_check_pressed(ord("Z"))
    {
        if DiaryMenu = "Index"
        {
        
            if OptionNumber = 0
            {
                DiaryMenu = "Music Records"
                OptionNumber = 0
            }
            
            if OptionNumber = 1
            {
                DiaryMenu = "Scoreboards"
                OptionNumber = 0
            }
            
            if OptionNumber = 4
            {
                KillSwitch = true
            }
        }
        
        if DiaryMenu = "Music Records"
        {
            if cassetDeployed = true
            {
            
                if ds_grid_get(global.OstUnlocked, 2, OptionNumber) = false
                {
                    Play_Sound_Fancy(snd_OptionBack,global.VolSFX/2)
                }
                else
                {
                    Xadjust = 0
                    Yadjust = -10
                    DiaryMenu = "Music Records: Infomation"
                    instance_create(115 + Xadjust, 350 + Yadjust, obj_CasExClick)
                    
                    click = instance_create(130 + Xadjust, 340 + Yadjust, obj_CasExClick)
                    click.image_angle = 50
                    
                    click = instance_create(100 + Xadjust, 350 + Yadjust, obj_CasExClick)
                    click.image_angle = -50
                    
                    obj_MusicHandler.TrackNo = OptionNumber
                    obj_MusicHandler.MusicReset = true
                    obj_MusicHandler.SoundSilenced = false
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu desplay (Index)
//Animation stuff
if DiaryMenu = "Index"
{
    MenuMaxOptions = 4

    OptionName[0] = "Music Records"
    OptionName[1] = "Score Boards"
    OptionName[2] = "Replays"
    OptionName[3] = "Spellcard Collection "
    OptionName[4] = "Exit"
    
    OptionFlavour[0] = "A place to listen to nice tunes whilst#reading about Avianis!"
    OptionFlavour[1] = "A place where game scores are kept!"
    OptionFlavour[2] = "Locked in this version..."
    OptionFlavour[3] = "Locked in this version..."
    OptionFlavour[4] = "Close the Diary"

    if KillSwitch = false //if the  Exit Button is pressed
    {
        if MenuAvali = false
        {
            if Scale &lt; 1
            {
                Scale += 1/10
            }
        }
    }
    else
    {
        if Scale &gt; 0
        {
            Scale -= 1/10
            if instance_exists(obj_MainMenu)
            {
                with(obj_MainMenu)
                {
                    OptXscale[OptionNumber] += 1/10
                }
            }
        }
        else
        {
            instance_destroy()
        }
    }

// Main draw events
draw_sprite_ext(spr_DiaryMain, 0, 512, 384, Scale, 1, 0, c_white, 1)
draw_sprite_ext(spr_DairyIndex, 0, 280, 75, Scale, 1, 0, c_white, 1)

Opt = 0

StartXpos = 110
StartYpos = 150

if KillSwitch = false //if the  Exit Button is pressed
{
    repeat(MenuMaxOptions+1)
    {
        if Opt = OptionNumber
        {
            if Opt = 2 or Opt = 3  // Whilst Spellcards and replays are locked OptionFlavour[0]
            {
                draw_text_outline_coloured(StartXpos, StartYpos+(85*Opt), string(OptionName[Opt]), c_white, c_white, c_red, c_red, c_black, 1, ft_MenuOption, 1)
                draw_text_outline_coloured(StartXpos, StartYpos+35+(85*Opt), string(OptionFlavour[Opt]), c_white, c_white, c_red, c_red, c_black, 1, ft_MenuTextSMDesc, 1)
            }
            else
            {
                //Keep this code when Spellcards and Replays are unlocked
                draw_text_outline_coloured(StartXpos, StartYpos+(85*Opt), string(OptionName[Opt]), c_white, c_white, color, color, c_black, 1, ft_MenuOption, 1)
                draw_text_outline_coloured(StartXpos, StartYpos+35+(85*Opt), string(OptionFlavour[Opt]), c_white, c_white, color, color, c_black, 1, ft_MenuTextSMDesc, 1)
            
            }
        }
        else
        {
            if Opt = 2 or Opt = 3  // Whilst Spellcards and replays are locked
            {
                draw_text_outline_coloured(StartXpos, StartYpos+(85*Opt), string(OptionName[Opt]), c_white, c_white, c_maroon, c_maroon, c_black, 1, ft_MenuOption, 1)
            }
            else
            {
                //Keep this code when Spellcards and Replays are unlocked
                draw_text_outline_coloured(StartXpos, StartYpos+(85*Opt), string(OptionName[Opt]), c_gray, c_gray, c_dkgray, c_dkgray, c_black, 1, ft_MenuOption, 1)
            }
        } 
     
     Opt ++
    }
}

// = Language Flags =

// ======
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu desplay (Music Records)
//Animation stuff
if DiaryMenu = "Music Records" //Main Room
{
    //Exit Out of Menu 
    if keyboard_check_pressed(ord("X"))
    {
        DiaryMenu = "Index"
        cassetDeployed = false
        CasScale = 2
        CasAlpha = 0
        OptionNumber = 0
    }
    
    // Main draw events
    draw_sprite_ext(spr_DiaryMain, 0, 512, 384, 1, 1, 0, c_white, 1)

    //Casset
    CasXpos = 180
    CasYpos = 180
    
    if cassetDeployed = false
    {
        draw_sprite_ext(spr_Casset, 0, CasXpos, CasYpos, CasScale, CasScale, 0, c_white, CasAlpha)
        
        if CasScale &gt; 1
        {
            CasScale -= 1/20
            CasAlpha += 1/20
        }
        else
        {
            cassetDeployed = true
        }
    }
    else
    {
        draw_sprite_ext(spr_Casset, 3, CasXpos, CasYpos, 1, 1, 0, c_white, 1)
        
        draw_sprite_ext(spr_CassetReel, 0, CasXpos-110, CasYpos-8, 1, 1, CasRot, c_white, 1)
        draw_sprite_ext(spr_CassetReel, 0, CasXpos+32, CasYpos-45, 1, 1, CasRot, c_white, 1)
        
        draw_sprite_ext(spr_Casset, 1, CasXpos, CasYpos, 1, 1, 0, c_white, 1)
    }   
        
    // ==== spr_CassetReel
    
    // Menu Display
    Opt = 0
    MenuMaxOptions = 8
    
    OptX = 0
    OptY = 0
    TextX = 600
    TextY = 500
    Spread = 80
    
    StartXpos = 600
    StartYpos = 100
    
    
    if KillSwitch = false //if the  Exit Button is pressed
    {
        repeat(MenuMaxOptions+1)
        {
            if Opt = OptionNumber
            {
                //Option Selected
                if ds_grid_get(global.OstUnlocked, 2, Opt) = true
                {
                    //Title Unlocked
                    draw_text_outline_coloured(TextX, TextY, "Title: " +ds_grid_get(global.OstUnlocked, 0, Opt), c_white, c_white, color, color, c_black, 1, ft_MenuOption, 1)
                    draw_text_outline_coloured(TextX, TextY+35, "Armand's Note: ", c_white, c_white, color, color, c_black, 1, ft_MenuOption, 1)
                    draw_text_outline_coloured(TextX, TextY+70, string(ArtistDesc[OptionNumber]), c_ltgray, c_ltgray, color, color, c_black, 1, ft_MenuOptionsm, 1) 
                    draw_sprite_ext(spr_CassetIcon, 1, StartXpos+(Spread*OptX), StartYpos+(Spread*OptY), 1, 1, 0, c_white, 1)
                    draw_sprite_ext(spr_CassetIcon, 0, StartXpos+(Spread*OptX), StartYpos+(Spread*OptY), 1, 1, 0, c_white, 1)
                }
                else
                {   
                    //Title Locked
                    draw_text_outline_coloured(TextX, TextY, "Title: " + ds_grid_get(global.OstUnlocked, 1, Opt), c_white, c_white, c_red, c_red, c_black, 1, ft_MenuOption, 1)
                    draw_text_outline_coloured(TextX, TextY+35, "Armand's Note: ", c_white, c_white, c_red, c_red, c_black, 1, ft_MenuOption, 1)
                    draw_text_outline_coloured(TextX, TextY+70, "[Unlock this entry for the Notes!]", c_red, c_red, c_red, c_red, c_black, 1, ft_MenuOptionsm, 1)
                    draw_sprite_ext(spr_CassetIcon, 1, StartXpos+(Spread*OptX), StartYpos+(Spread*OptY), 1, 1, 0, c_white, 1)
                    draw_sprite_ext(spr_CassetIcon, 0, StartXpos+(Spread*OptX), StartYpos+(Spread*OptY), 1, 1, 0, c_black, 1)
                }
            }
            else
            {
                //Option Unselected
                if ds_grid_get(global.OstUnlocked, 2, Opt) = false
                {
                    draw_sprite_ext(spr_CassetIcon, 0, StartXpos+(Spread*OptX), StartYpos+(Spread*OptY), 1, 1, 0, c_black, 1)
                }
                else
                {
                    draw_sprite_ext(spr_CassetIcon, 0, StartXpos+(Spread*OptX), StartYpos+(Spread*OptY), 1, 1, 0, c_gray, 1)
                }
            } 
     
        OptX ++
        OptX = OptX % 5
        if  OptX = 0
        {
            OptY ++
        }
        
        Opt ++
        }
    }
    // =====
}

if DiaryMenu = "Music Records: Infomation" //Song Selected
{
    if keyboard_check_pressed(ord("X"))
    {
        DiaryMenu = "Music Records"
        obj_MusicHandler.TrackNo = 0
        obj_MusicHandler.MusicReset = true
        obj_MusicHandler.SoundSilenced = false
    }
    
    // Main draw events obj_CasExtraMusicalnotes
    draw_sprite_ext(spr_DiaryMain, 0, 512, 384, 1, 1, 0, c_white, 1)
    
    draw_sprite_ext(spr_Casset, 3, CasXpos, CasYpos, 1, 1, 0, c_white, 1)
    
    draw_sprite_ext(spr_CassetReel, 0, CasXpos-110, CasYpos-8, 1, 1, CasRot, c_white, 1)
    draw_sprite_ext(spr_CassetReel, 0, CasXpos+32, CasYpos-45, 1, 1, CasRot, c_white, 1)
    
    draw_sprite_ext(spr_Casset, 2, CasXpos, CasYpos, 1, 1, 0, c_white, 1)
    
    CasRot ++
    CasRot = CasRot % 360
    
    CasPartEmit ++
    CasPartEmit = CasPartEmit % 30
    
    if CasPartEmit = 1
    {
        Notex = random_range(-10,10)
        Notey = random_range(-50,50)
        Note = instance_create(400, 150+Notey, obj_CasExtraMusicalnotes)
    }
    
    //Character infomation
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu desplay (ScoreBoards)
//Animation stuff
if DiaryMenu = "Scoreboards" //Main Room
{
    //Exit Out of Menu 
    if keyboard_check_pressed(ord("X"))
    {
        DiaryMenu = "Index"
        cassetDeployed = false
        CasScale = 2
        CasAlpha = 0
        OptionNumber = 0
    }
    
    // Menu Display
    Opt = 0
    MenuMaxOptions = 3
    
    // Main draw events
    draw_sprite_ext(spr_DiaryMain, 0, 512, 384, 1, 1, 0, c_white, 1)
    
    repeat(MenuMaxOptions+1)
    {
        if Opt = OptionNumber
        {
            StartXpos = 280
            StartYpos = 200
            draw_sprite_ext(spr_MenuDifficulty, Opt+4, StartXpos, StartYpos+(125*Opt), 1, 1, 0, c_white, 1)
            draw_sprite_ext(spr_MenuDifficulty, Opt, StartXpos, StartYpos+(125*Opt), 1, 1, 0, c_white, 1)
            
            //Scoreboard drawing
            for(SD=0; SD&lt;10; SD++)
            {
                //Variables for here
                var SDS = 50; //Changes Spacing between valus down the Y axis
                var SDY = 150; //Adjust the whole board up or down!
                var XSD = 540
                
                draw_set_halign(fa_middle)
                draw_set_valign(fa_middle)
                //Entry Number
                draw_text_outline(XSD-10, SDY+(SDS*SD), string(SD+1), c_white, c_black, 1, ft_ScoreImput, 1)
      
                //Player Name
                draw_text_outline(XSD+65, SDY+(SDS*SD), ds_grid_get(global.Scoreboard[Opt], 0, SD), c_white, c_black, 1, ft_ScoreImput, 1)
                
                //Score
                //Adding 0's for score
                PS = ds_grid_get(global.Scoreboard[Opt], 1, SD)
                PlayScore = string_repeat("0", 9 - string_length(PS)) + string(PS)
                
                for (var i = string_length(PlayScore) - 2; i &gt; 1; i -= 3)
                {
                    PlayScore = string_insert(",", PlayScore, i);
                }
    
                //Score Draw
                draw_text_outline(15+XSD+200, SDY+(SDS*SD), PlayScore, c_ltgray, c_black, 1, ft_ScoreImput, 1)
             
                //Character Used
                draw_text_outline(15+XSD+330, SDY+(SDS*SD), ds_grid_get(global.Scoreboard[Opt], 2, SD), c_gray, c_black, 1, ft_ScoreImput, 1)
                
                //Stage Reached
                draw_text_outline(15+XSD+400, SDY+(SDS*SD), ds_grid_get(global.Scoreboard[Opt], 3, SD), c_white, c_black, 1, ft_ScoreImput, 1)
    
                draw_set_halign(fa_left)
                draw_set_valign(fa_top)             
            }
        }
        else
        {
            draw_sprite_ext(spr_MenuDifficulty, Opt, StartXpos, StartYpos+(125*Opt), 1, 1, 0, c_gray, 1)
        }  
        
        Opt ++
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
