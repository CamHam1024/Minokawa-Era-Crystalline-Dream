<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ScoreRecordIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-31</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
if global.Diff = "Easy"
{
    ScoreUsed = 0
    Board = "EScoreboard"
}
if global.Diff = "Normal"
{
    ScoreUsed = 1
    Board = "NScoreboard"
}
if global.Diff = "Hard"
{
    ScoreUsed = 2
    Board = "HScoreboard"
}
if global.Diff = "Flightless"
{
    ScoreUsed = 3
    Board = "FScoreboard"
}

if global.Player = "Midnight" 
{
    PlayerUsed = "MDY"
    PC = make_colour_hsv(160, 100, 200)
}
else
{
    PlayerUsed = "ALX"
    PC = make_colour_hsv(190, 100, 200)
}

PlayerName = ""

MCS = make_colour_hsv(200, 100, 200) // MCS = MenuColour Selected
MCS1 = make_colour_hsv(30, 100, 200) // MCS = MenuColour Selected
WaitTimer = 0
WaitTimer2 = 0
NameSet = false

//Score display 
PlayScore = string_repeat("0", 9 - string_length(global.Score)) + string(global.Score)
                
for (var i = string_length(PlayScore) - 2; i &gt; 1; i -= 3)
{
    PlayScore = string_insert(",", PlayScore, i);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Score check
//Scorboard Scan
EntryStop=0
for (ScEn=0; ScEn&lt;10; ScEn++) 
{
    if global.Score &lt; ds_grid_get(global.Scoreboard[ScoreUsed], 1, ScEn)
    {
        ScoreOnList = false
        EntryStop++
    }
    else
    {
        ScoreOnList = true
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_ScoreSet</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ScoreSet Display
SXP = 512  //Starting XPos for Text
SYP = 200 //Starting YPos for Text

if ScoreOnList = true //if Score IS list worthy PlayerName
{
    draw_sprite_ext(spr_MenuBoarderLarge,0,0,0,1,1,0,c_white,0.8)
    if NameSet = false
    {
        draw_set_halign(fa_middle)
        draw_set_valign(fa_middle)
        draw_text_outline_coloured(SXP, SYP, "You scored", c_white, c_white, MCS, MCS, c_black, 1, ft_ScoreImput, 1)
        draw_text_outline_coloured(SXP, SYP+50, string(PlayScore), c_white, c_white, MCS1, MCS1, c_black, 1, ft_ScoreImputLG, 1)
        draw_text_outline_coloured(SXP, SYP+100, "as", c_white, c_white, MCS, MCS, c_black, 1, ft_ScoreImput, 1)
        draw_text_outline_coloured(SXP, SYP+150, string(global.Player), c_white, c_white, PC, PC, c_black, 1, ft_ScoreImputLG, 1)
    
        draw_text_outline_coloured(SXP, SYP+230, "Whats your name? (Type 4 characters)", c_white, c_white, MCS, MCS, c_black, 1, ft_ScoreImput, 1)
        draw_text_outline_coloured(SXP, SYP+280, '"'+string(PlayerName)+'"', c_white, c_white, PC, PC, c_black, 1, ft_ScoreImputLG, 1)
    
        if WaitTimer = 30
        {
            if string_length(keyboard_string)&lt;=4
            {
                PlayerName = keyboard_string
            }
            else
            {
                keyboard_string = PlayerName
            }
            
            if string_length(keyboard_string)=4
            {
                draw_text_outline_coloured(SXP, SYP+330, "Press Enter to confirm!", c_white, c_white, MCS, MCS, c_black, 1, ft_ScoreImput, 1)
                if keyboard_check_pressed(vk_enter)
                {
                    NameSet = true
                    ds_grid_set(global.OstUnlocked, 2, 1, true)
                    
                    ds_grid_set(global.Scoreboard[ScoreUsed], 0, 10, PlayerName)
                    ds_grid_set(global.Scoreboard[ScoreUsed], 1, 10, global.Score)
                    ds_grid_set(global.Scoreboard[ScoreUsed], 2, 10, PlayerUsed)
                    ds_grid_set(global.Scoreboard[ScoreUsed], 3, 10, global.CurrentStage)
                    
                    ds_grid_sort(global.Scoreboard[ScoreUsed], 1, 0)
                    
                    //Save Diary Entry
                    ini_open("Settings.ini")

                    ini_write_string("Diary", Board, ds_grid_write(global.Scoreboard[ScoreUsed]))
        
                    ini_close()
                    WaitTimer = 0
                }
            }
        }
        else
        {
            WaitTimer ++
        }
    
        draw_set_halign(fa_left)
        draw_set_valign(fa_bottom)
    }
}
else
{
    instance_destroy()
}

/*if NameSet = true
{
    PN  = ds_grid_get(global.Scoreboard[ScoreUsed], 0, ScEn) 
    PS  = ds_grid_get(global.Scoreboard[ScoreUsed], 1, ScEn)
    PP  = ds_grid_get(global.Scoreboard[ScoreUsed], 2, ScEn)
    PSt = ds_grid_get(global.Scoreboard[ScoreUsed], 3, ScEn)
    draw_set_halign(fa_middle)
    draw_set_valign(fa_middle)
    draw_text_outline_coloured(SXP, SYP, string(PN)+" / "+string(PS)+" / "+string(PP)+" / "+string(PSt), c_white, c_white, MCS, MCS, c_black, 1, ft_ScoreImput, 1)
    draw_set_halign(fa_left)
    draw_set_valign(fa_bottom)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Full ScoreBoard
//Variables for here
var SDS = 50; //Changes Spacing between valus down the Y axis    
var SDY = 150; //Adjust the whole board up or down!
var XSD = 500
var NSC = make_colour_hsv(200, 200, 200) // MCS = MenuColour Selected
var NUSC = make_colour_hsv(200, 200, 100) // MCS = MenuColour Selected

if NameSet = true
{
    draw_set_halign(fa_middle)
    draw_set_valign(fa_middle) 
    
    draw_text_outline_coloured(512, 65, 'New High Score!', NSC, NSC , c_white, c_white, c_black, 1, ft_ScoreImputLG, 1)
    
    //Scoreboard drawing
    for(SD=0; SD&lt;10; SD++)
    {
               
        //Score
        //Adding 0's for score
        PS = ds_grid_get(global.Scoreboard[ScoreUsed], 1, SD)
        PlayScore = string_repeat("0", 9 - string_length(PS)) + string(PS)
                    
        for (var i = string_length(PlayScore) - 2; i &gt; 1; i -= 3)
        {
            PlayScore = string_insert(",", PlayScore, i);
        }
        
        //Score Draw
        //draw_text_outline(XSD+200, SDY+(SDS*SD), PlayScore, c_ltgray, c_black, 1, ft_ScoreImput, 1)
        if SD = ScEn
        {
            //Entry Number
            draw_text_outline_coloured(XSD-10, SDY+(SDS*SD), string(SD+1), NSC, NSC , c_white, c_white, c_black, 1, ft_ScoreImput, 1)
          
            //Player Name
            draw_text_outline_coloured(XSD+65, SDY+(SDS*SD), ds_grid_get(global.Scoreboard[ScoreUsed], 0, SD), NSC, NSC , c_white, c_white, c_black, 1, ft_ScoreImput, 1)
            
            //Score Draw
            draw_text_outline_coloured(15+XSD+200, SDY+(SDS*SD), PlayScore,  NSC, NSC , c_white, c_white, c_black, 1, ft_ScoreImput, 1)
            
            //Character Used
            draw_text_outline_coloured(15+XSD+330, SDY+(SDS*SD), ds_grid_get(global.Scoreboard[ScoreUsed], 2, SD),  NSC, NSC , c_white, c_white, c_black, 1, ft_ScoreImput, 1)
                    
            //Stage Reached
            draw_text_outline_coloured(15+XSD+400, SDY+(SDS*SD), ds_grid_get(global.Scoreboard[ScoreUsed], 3, SD),  NSC, NSC , c_white, c_white, c_black, 1, ft_ScoreImput, 1)
        
        }
        else
        {
            //Entry Number
            draw_text_outline_coloured(XSD-10, SDY+(SDS*SD), string(SD+1), NUSC, NUSC, c_gray, c_gray, c_black, 1, ft_ScoreImput, 1)
          
            //Player Name
            draw_text_outline_coloured(XSD+65, SDY+(SDS*SD), ds_grid_get(global.Scoreboard[ScoreUsed], 0, SD), NUSC, NUSC, c_gray, c_gray, c_black, 1, ft_ScoreImput, 1)
            
            //Score Draw
            draw_text_outline_coloured(15+XSD+200, SDY+(SDS*SD), PlayScore, NUSC, NUSC, c_gray, c_gray, c_black, 1, ft_ScoreImput, 1)
            
            //Character Used
            draw_text_outline_coloured(15+XSD+330, SDY+(SDS*SD), ds_grid_get(global.Scoreboard[ScoreUsed], 2, SD), NUSC, NUSC, c_gray, c_gray, c_black, 1, ft_ScoreImput, 1)
                    
            //Stage Reached
            draw_text_outline_coloured(15+XSD+400, SDY+(SDS*SD), ds_grid_get(global.Scoreboard[ScoreUsed], 3, SD), NUSC, NUSC, c_gray, c_gray, c_black, 1, ft_ScoreImput, 1)
        
        }            
    }
    
    //Stage Reached
    draw_text_outline_coloured(512, 675, 'Press "Enter" to continue!', NSC, NSC , c_white, c_white, c_black, 1, ft_ScoreImput, 1)
    draw_set_halign(fa_left)
    draw_set_valign(fa_top) 
    
    if WaitTimer &lt; 30
    {
        WaitTimer ++     
    }
    else
    {
        if keyboard_check_pressed(vk_enter)
        {
            instance_destroy()
        }  
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
