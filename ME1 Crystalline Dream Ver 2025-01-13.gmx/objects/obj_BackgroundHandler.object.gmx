<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite320</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Background Inits
Background = surface_create(room_width,room_height)
alphaBlended = false

TVA = 0 //SecretTV variables
//Stages
scr_InitFillerStagebackground()
scr_Test3dBackgroundInit()
scr_TestRoomBackgroundinit()

scr_InitStage1Background()
scr_InitStage2Background()

scr_Scrolltestinit()

//Boss
scr_InitAlexandraBackground()
scr_InitMidnightBackground()
scr_InitLilliBackground()
scr_InitTiaBackground()
scr_InitShouBackground()

scr_InitTourmalineBackground()

scr_InitGinkeiBackground()

if room =! room_TestStage
{
    StageBackground = scr_Stage1Background 
    BossSpellBackground = scr_LilliBackground
}
else
{
    StageBackground = scr_Test3dBackground
    BossSpellBackground = scr_LilliBackground
}

/*avalible spellbackgrounds
scr_AlexandraBackground
scr_MidnightBackground
scr_LilliBackground
scr_TiaBackground
scr_TourmalineBackground
scr_GinkeiBackgroundzz

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spell Background Primative Init
Hazepos = 0
HazeposE = 0
startinghaze = true
Endinghaze = false

SpellBack = surface_create(1024, 768)

ANGLE = 360
steps = 100
xx = 0
yy = 0
radius = 0
OneTimeSwitch = false
cloudDir = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Specific Ini
global.S2Light = surface_create(1024, 768)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Background Inits
//Stages
scr_InitFillerStagebackground()
scr_Test3dBackgroundInit()


//Boss
scr_InitAlexandraBackground()
scr_InitLilliBackground()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw backgound (Stage)
script_execute(StageBackground)

//Stage 2 Lantern Surface
if global.CurrentStage = "St2" 
{ 
    script_execute(spr_Stage2LanternLight) 
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw background (Boss Spell)
if !surface_exists(SpellBack)
{
  SpellBack = surface_create(1024, 768)
}
surface_set_target(SpellBack) 
//===Draw sprites go here===

script_execute(BossSpellBackground)

//==========================
surface_reset_target()
draw_set_colour(c_white)

//=== Primative Init =======

xx = 512
yy = 386

if global.SpellcardType = "Spellcard" or global.SpellcardType = "TimeOut"
{
    if radius &lt; 1500
    {
        radius += 1500/120
    }
}
else
{
    //OneTimeSwitch = false
    
    if radius &gt; 0
    {
        radius -= 1500/30
    }
}

var i

TexStartx = (xx-radius)/room_width //surface_get_width(global.backside)
TexStarty = (yy-radius)/room_height //surface_get_height(global.backside)

TexEndx = (xx+radius)/room_width
TexEndy = (yy+radius)/room_height

//Primative
TEX = surface_get_texture(SpellBack) //TEX = sprite_get_texture(BACKKIEMATE, 0) //

draw_primitive_begin_texture(pr_trianglefan, TEX)

draw_enable_alphablend(alphaBlended)

draw_vertex_texture(xx, yy, (TexStartx+TexEndx)/2, (TexStarty+TexEndy)/2)

for(i = 0; i &lt;= steps; i += 1)
{
    //draw_vertex(xx + lengthdir_x(radius, ANGLE  * i / steps), yy + lengthdir_y(radius, ANGLE  * i / steps))
    
    xAlt = xx + lengthdir_x(radius, ANGLE  * i / steps)
    yAlt = yy + lengthdir_y(radius, ANGLE  * i / steps)
    
    draw_vertex_texture(xAlt, yAlt, xAlt/room_width, yAlt/room_height)
}
draw_primitive_end()
draw_enable_alphablend(true)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Starting haze
/*
if startinghaze = true
{
    draw_sprite(spr_BottomstageHaze, 0, 512, 768+Hazepos)
    if Hazepos &lt; 1500
    {
        Hazepos += 1500/60
    }
    else
    {
        Hazepos = 0
    }
}

if Endinghaze = true
{
    draw_sprite(spr_StagerHaze, 0, 512, -1300+HazeposE)
    if Hazepos &lt; 1300
    {
        Hazepos += 1300/60
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
