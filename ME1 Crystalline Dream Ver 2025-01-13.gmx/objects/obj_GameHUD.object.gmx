<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_HUDIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause
PauseDelay = 0
MemeSpin = 0
//instance_create(x,y,obj_PauseEvents)
/*global.Pause = false
Surface = surface_create(1024, 768)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation variables
instance_create(0, 0, obj_BackgroundHandler)

//BossName
NameFade = 0
NameMove = 0

//SpellLine Variables
SpellNameReset = true
SpellYTimer = 0
SNYDir = 0
SpellNameY = 600 + lengthdir_y(600,0)
SpellLineAlpha = 0
SNYSlowdown = 30

SecSwitch = false 
SecAlpha = 0

//Point of Collection bar
Alpha = 1
AlphaTimer = 60

//Extend variables
LifeAlphaTimer = 0
LifeAlphaPhase = 0
LifeAlpha = 1
LifeExtendDisplay = false
ExtendDisplayTimer = 90

SpellAlphaTimer = 0
SpellAlphaPhase = 0
SpellAlpha = 1
SpellExtendDisplay = false
SpellExtendDisplayTimer = 90

HPSecondSwitch = false

//Difficulty Display
DiffTimer = 0
DiffPhase = 0
DiffScale = 1
DiffY = 55
DiffX = 1024/2

//Startupfadein
BOScale = 1
BOAngle = 0
BOAlpha = 1
BOTimer = 0
BOScaleIncrease = 0

CrystalChange = 0
FadeAlpha = 0.5

//Autocollect Border
LineXscale = 0
TextAlpha = 0
Phase = 0
PhaseTimer = 0
TextYscale = 1
Reset = false

//pointMultiplier
ColChangeCounter = 0
ColVar = 1

//Burst
DreamImg = 0
DreamTimer = 0

AlphaFlex = 0
AlphaVal = 0

MultiBurst = false
BurAlpha = 1
BurScale = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Other Var
XSurPos = 100
global.PlayingFeild = surface_create(1024,768)
instance_create(x, y, obj_DrawSurfaceStart)
Xmovey = 0
MerpX = 0

//HP bar and icons
HPAlpha = 1
             
BossHPX = 202
BossHPY = 20

HPBarMoveY = -47
HPbarX = 263
HPbarY = 25-14

DisplayMultiplier = global.PreenPointMultiply

//spellcard Icons
Xinc = 0
SCTimer = 0
SCHN = 0
IconDisplay = 0
DEPTH = -21

WhiteTextGrad = make_colour_hsv(210,75, 255)
failed = make_colour_hsv(0,75, 255)

//screen wabble
Wabfact = 0
WabbleDegrade = 0.1
Wabble = random_range(-Wabfact,Wabfact)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (obj_DrawSurfaceStart)
{
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause
if PauseDelay &lt; 60
{
    PauseDelay ++
}
else
{
    if keyboard_check_pressed(vk_escape)
    {
        if !instance_exists(obj_PauseMenu)
        {
            PauseMenu = instance_create(0,0,obj_PauseMenu)
            PauseMenu.MenuSet = "Paused"
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Serious Functions</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Auto collection banner
draw_sprite_ext(spr_AutoCollectText, 0, 1024/2, global.AutoCollectPoint-15, 1, TextYscale, 0, c_white, TextAlpha)
draw_sprite_ext(spr_AutoCollectLine, 0, 1024/2, global.AutoCollectPoint, LineXscale, 1, 0, c_white, 1)

if Phase = 0
{
    if TextAlpha &lt; 1
    {
        TextAlpha += 0.1
    }
    
    if LineXscale &lt; 1
    {
        LineXscale += 0.05
    }
    
    if TextAlpha &gt;= 1 and LineXscale &gt;= 1
    {
        if PhaseTimer &lt; 120
        {
            PhaseTimer += 1
        }
        else
        {
            Phase = 1
        }
    }
}

if Phase = 1
{
    if TextYscale &gt; 0
    {
        TextYscale -= 0.05
    }
    if LineXscale &gt; 0
    {
        LineXscale -= 0.04
    }
}

if Reset = true
{
    LineXscale = 0
    TextAlpha = 0
    Phase = 0
    PhaseTimer = 0
    TextYscale = 1
    Reset = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Boarder</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Boarder
surface_reset_target()
draw_sprite_ext(spr_GameBoarderHUD, 0, 0, 0, 1, 1, 0, c_white, 1)

if room != room_Stage
{
    draw_sprite_ext(spr_TestRoomBoarder, 0, 0, 0, 1, 1, 0, c_white, 1)
}

//draw_text_outline(1024 - 30 , 768 - 25, string(fps), c_white, c_black, 1, ft_PipedreamValues, 1)
draw_text_outline_coloured(1024 - 30 , 768 - 25, string(fps), c_white, c_white, c_ltgray, c_ltgray, c_black, 1, ft_FPS, 1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw_Playing feild</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Playing Feild Surface

if !surface_exists(global.PlayingFeild)
{
    global.PlayingFeild = surface_create(1024,768)
}

draw_enable_alphablend(false)
draw_surface_part_ext(global.PlayingFeild, 192, 14, 832 - 192, 754 - 14, 192+random_range(-Wabfact,Wabfact), 14+random_range(-Wabfact,Wabfact), 1, 1, c_white, 1)
draw_enable_alphablend(true)

if Wabfact &gt; 0
{
    Wabfact -= WabbleDegrade
}
else
{
    Wabfact = 0
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Boss HUD</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spellcard Icons
if global.SpellHUDdisplay = true
{
    /*//Spellcard Count ===========================================================================================
    SpellIconX = BossHPX
    SpellIconY = BossHPY + 10

    xx = SpellIconX
    yy = SpellIconY
    spr = spr_SpellcardCounter
    spacing = sprite_get_width(spr) + 2
    repeat global.Spellcards
        {
        draw_sprite(spr,0,xx,yy)
        xx += spacing
        }
    
    xx = SpellIconX
    yy = SpellIconY
    spr = spr_SpellcardCounter
    spacing = sprite_get_width(spr) + 2
    repeat global.RemainingSpellcards
        {
        draw_sprite(spr,1,xx,yy)
        xx += spacing
        }*/

        if IconDisplay &lt; 60
        {
            IconDisplay += 1
        }
        else
        {
            if SCHN &lt; global.Spellcards
            {
                if SCTimer &lt; 3
                {
                    SCTimer += 1
                }
                else
                {
                    Card = instance_create(270+Xinc,45,obj_SpellcardIcon)
                    Card.depth = DEPTH
                    Card.SpellNo = 1+SCHN
                    DEPTH -= 1
                    Xinc += 15
                    SCHN += 1
                    SCTimer = 0
                }
            }
        }
}
else
{
    Xinc = 0
    SCTimer = 0
    SCHN = 0
    IconDisplay = 0
    DEPTH = -21
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boss HP Bar

//New HPBar ============================================================================================
    BossHP = sprite_get_width(spr_HPBArs) * global.SpellcardHealth/global.SpellcardMaxHealth
    draw_sprite_ext(spr_HPBArs, 0, HPbarX, HPbarY+HPBarMoveY, 1, 1, 0, c_white, HPAlpha)
    
    if global.SpellcardType = "NonSpell" 
    {
        draw_sprite_part_ext(spr_HPBArs, 1, 0, 0, BossHP, 10, HPbarX, HPbarY+HPBarMoveY, 1, 1, c_white, HPAlpha)
    }
    
    if global.SpellcardType = "Spellcard" 
    {
        draw_sprite_part_ext(spr_HPBArs, 2, 0, 0, BossHP, 10, HPbarX, HPbarY+HPBarMoveY, 1, 1, c_white, HPAlpha)
    }
    
    if global.SpellcardType = "TimeOut" 
    {
        draw_sprite_part_ext(spr_HPBArs, 2, 0, 0, BossHP, 10, HPbarX, HPbarY+HPBarMoveY, 1, 1, c_white, HPAlpha)
        draw_sprite_ext(spr_HPBArs, 3, HPbarX, HPbarY+HPBarMoveY, 1, 1, 0, c_white, HPAlpha-0.5)
    }
    
    //HP Frame obj_ParDialog HPBarX ,HPBarMoveY
    draw_sprite_ext(spr_HPFrame, 0, 512 ,HPBarMoveY, 1, 1, 0, c_white, HPAlpha-0.2)

if global.SpellHUDdisplay = true
{
    if instance_exists(obj_ParDialog)
    {
        if HPBarMoveY &lt; 0
        {
            HPBarMoveY += 1
        }
    }
    else
    {
    
        /*if global.Pause = true
        {
            if HPBarMoveY &gt; -47
            {
                HPBarMoveY -= 2
            }
        }*/
        if instance_exists(obj_ParPlayer)
        {
            if obj_ParPlayer.y &lt; 50
            {
                if HPBarMoveY &gt; -25
                {
                    HPBarMoveY -= 1
                }
                if HPAlpha &gt; 0.5
                {
                    HPAlpha -= 0.05
                }
            }
            else
            {
                if HPBarMoveY &lt; 0
                {
                    HPBarMoveY += 1
                }
                if HPAlpha &lt; 1
                {
                    HPAlpha += 0.05
                }
            }
        }
    }
}
else
{
    if HPBarMoveY &gt; -47
    {
        HPBarMoveY -= 1
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boss infomation (Spellcard name Animation)

if global.SpellHUDdisplay = true
{
    //Boss name Appear
    if NameFade &lt; 1
    {
        NameFade += 1/30
    }
    
    if global.SpellcardType = "Spellcard" or global.SpellcardType = "TimeOut"
    {
       //Spellcard name
       AlighY = 65 
       draw_sprite_ext(spr_SpellcardLine, 0, BossHPX+15, AlighY + SpellNameY, 1, 1, 0, c_white, SpellLineAlpha-SecAlpha) 
       draw_text_outline_coloured(BossHPX+20, AlighY+10 + SpellNameY, string(global.Spellcardname), c_white, c_white, WhiteTextGrad, WhiteTextGrad, c_black, 1, ft_YuGothicSpellcard, SpellLineAlpha-SecAlpha)
       
       //Secondry Alpha for back to back spellcards
       if SecSwitch = true
       {
            if SecAlpha &lt; 1
            {
                SecAlpha += 1/10
            }
       }
       else
       {
            SecAlpha = 0
       }
       
       //Spell Animation
       if SpellYTimer = 60
       {
            SpellNameY = 600 + lengthdir_y(600,SNYDir)
            
            if SNYDir &lt; 90
            {
                SNYDir += 3
            }
            
       }else{SpellYTimer += 1}
       
       if SpellLineAlpha &lt; 1
       {
            SpellLineAlpha += 1/30
       }
       
       //SpellNameReset
       if SpellNameReset = true
       {
            SpellYTimer = 0
            SNYDir = 0
            SpellNameY = 600 + lengthdir_y(600,SNYDir)
            SpellLineAlpha = 0
            SNYSlowdown = 30
            
            SecSwitch = false 
            SecAlpha = 0
            
            SpellNameReset = false
       }
       
       //Spell Bonus Number render
       SpellBonus = string_repeat("0", 7 - string_length(string(floor(global.SpellBonus)))) + string(global.SpellBonus)
       for (var i = string_length(SpellBonus) - 2; i &gt; 1; i -= 3)
       {
           SpellBonus = string_insert(",", SpellBonus, i);
       }
       
       //SpellBonus Display
       if global.SpellCaptured = true
       {
            draw_text_outline_coloured(BossHPX + 180, BossHPY + 80 + SpellNameY, "Bonus:  " + string(SpellBonus), c_white, c_white, WhiteTextGrad, WhiteTextGrad, c_black, 1, ft_YuGothicSpellcard1, SpellLineAlpha-SecAlpha)
       }
       else
       {
            draw_text_outline_coloured(BossHPX + 180, BossHPY + 80 + SpellNameY, "Bonus:  " + "Failed...", c_white, c_white, failed, failed, c_black, 1, ft_YuGothicSpellcard1, SpellLineAlpha-SecAlpha)
       }
    }
    else
    {
        if NameMove &gt; 0 //Name move reset
        {
            NameMove -= 60/30
        }
    }      
}
else
{
    //Boss name vanish
    if NameFade &gt; 0
    {
        NameFade -= 1/10
    }
}

//Boss name
draw_text_outline_coloured(202, 58+NameMove, string(global.BossName), c_white, c_white, WhiteTextGrad, WhiteTextGrad, c_black, 1, ft_YuGothicSpellcard1, NameFade)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boss Infomation (General)

if global.SpellHUDdisplay = true
{
    if global.SpellcardTimeSec &lt;= 5
    {
       ClockColour = c_red
    }
    else
    {
       ClockColour = c_ltgray
    }
    
    //if global.SpellTimerActive = true //and Pause = false
    //{
        SpellcardClock = string_repeat("0", 2 - string_length(string(floor(global.SpellcardTimeSec)))) + string(global.SpellcardTimeSec)
        for (var i = string_length(SpellcardClock) - 2; i &gt; 1; i -= 3)
        {
            SpellcardClock = string_insert(",", SpellcardClock, i);
        }
    
        SpellcardClockSec = string_repeat("0", 2 - string_length(string(floor(global.SpellcardTimeMiliSec)))) + string(global.SpellcardTimeMiliSec)
        for (var i = string_length(SpellcardClockSec) - 2; i &gt; 1; i -= 3)
        {
            SpellcardClockSec = string_insert(",", SpellcardClockSec, i);
        }
        
        //draw_text_outline(212, -2+HPBarMoveY, string(SpellcardClock), ClockColour, c_black, 1, ft_SpellcardTimerFont, 1)
        draw_text_outline_coloured(212, -2+HPBarMoveY, string(SpellcardClock), c_white, c_white, ClockColour, ClockColour, c_black, 1, ft_ScoreValue, 1)
    //}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Player HUD</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crystals
//Grazing Crystal
GRot = 0  
Gx = 192 + 34
Gy = 754 - 25
GrazeCrystal = sprite_get_width(spr_MultiplierBar) * global.ScoreManaCollected/global.MaxScoreMana

if ColChangeCounter &gt; 0
{
    ColChangeCounter -= 1
    ColVar = 3
}else{
    ColVar = 1
}

draw_set_blend_mode(bm_add)
draw_sprite_ext(spr_BaseCrystal, 0, 192 + 18 + 5, 754 - 20 - 5, BurScale, BurScale, 0, c_white, BurAlpha)
draw_set_blend_mode(bm_normal)

draw_sprite_ext(spr_MultiplierBar, 0, Gx, Gy, 1, 1, GRot, c_white, 1)
draw_sprite_general(spr_MultiplierBar, ColVar, 0, 0, GrazeCrystal, 58, Gx, Gy - 8, 1, 1, GRot, c_white, c_white, c_white, c_white, 1)
draw_sprite_ext(spr_MultiplierBar, 2, Gx, Gy, 1, 1, GRot, c_white, 1)

if FadeAlpha &gt; 0.5
{
    FadeAlpha -= 0.01
}

//Burst
if MultiBurst = true
{
    if BurAlpha &gt; 0 
    {
        BurAlpha -= 1/20
        BurScale += 1/20
    }
    else
    {
        MultiBurst = false
    }
}
else
{
    BurAlpha = 1
    BurScale = 1
}

//Base Crystal
draw_sprite_ext(spr_BaseCrystal, 0, 192 + 18 + 5, 754 - 20 - 5, 1, 1, 0, c_white, 1)

//Life, Bomb and dream gauges
xpos = 928
ypos = 460

//Main Bar
draw_sprite(spr_MainBar, 0, xpos, ypos)

//Deam gauge
if global.DreamBoarderActivate = true
{
    DreamTimer += 1
    DreamTimer = DreamTimer % 5
    if DreamTimer = 1
    {
        DreamImg += 1
        DreamImg = DreamImg % 4
    }
}
else
{
    DreamImg = 4
}
DHeight = sprite_get_height(spr_DreamGague) * global.DreamBoarderPoint/global.DreamBoarderMax
DWidth = sprite_get_width(spr_DreamGague)

draw_sprite_general(spr_DreamGague,DreamImg, 0, 0, DWidth, DHeight, xpos + 33, ypos + 128, 1, 1, 180, c_white, c_white, c_white, c_white, 1)
draw_sprite_general(spr_DreamGague,5, 0, 0, DWidth, DHeight, xpos + 33, ypos + 128, 1, 1, 180, c_white, c_white, c_white, c_white, AlphaFlex-0.2)

AlphaFlex = lengthdir_x(1, AlphaVal) 
AlphaVal += 2
AlphaVal = AlphaVal % 360

//Life Gauge
LHeight = sprite_get_height(spr_LifeBar) * global.LifeManaCollected/global.MaxLifeMana
LWidth = sprite_get_width(spr_LifeBar)

draw_sprite_general(spr_LifeBar,0, 0, 0, LWidth, LHeight, xpos + 41, ypos + 138, 1, 1, 180, c_white, c_white, c_white, c_white, 1)

//Bomb Gauge
BHeight = sprite_get_height(spr_BombBar) * global.SpellManaCollected/global.MaxSpellMana
BWidth = sprite_get_width(spr_LifeBar)

draw_sprite_general(spr_BombBar,0, 0, 0, BWidth, BHeight, xpos, ypos + 139, 1, 1, 180, c_white, c_white, c_white, c_white, 1)

draw_sprite(spr_MainBar, 1, xpos, ypos)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_GameHUD</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scoreing

//Draw Score
//High Score Display

draw_text_outline_coloured(1024 - 180, 50, "HiScore:", make_colour_hsv(127, 100, 255), make_colour_hsv(127, 100, 255), make_colour_hsv(127, 50, 255), make_colour_hsv(127, 50, 255), c_black, 1, ft_HUDText, 1)

Hiscore = string_repeat("0", 9 - string_length(string(floor(global.HiScore)))) + string(global.HiScore)
for (var i = string_length(Hiscore) - 2; i &gt; 1; i -= 3)
{
    Hiscore = string_insert(",", Hiscore, i);
}
draw_text_outline_coloured(1024 - 180, 75, string(Hiscore), c_white, c_white, c_ltgray, c_ltgray, c_black, 1, ft_ScoreValue, 1)

//score Display    
draw_text_outline_coloured(1024 - 180, 105, "Score:", make_colour_hsv(127, 100, 255), make_colour_hsv(127, 100, 255), make_colour_hsv(127, 50, 255), make_colour_hsv(127, 50, 255), c_black, 1, ft_HUDText, 1)
Score = string_repeat("0", 9 - string_length(string(floor(global.Score)))) + string(global.Score)
for (var i = string_length(Score) - 2; i &gt; 1; i -= 3)
    {
    Score = string_insert(",", Score, i);
    }

draw_text_outline_coloured(1024 - 180, 130, string(Score), c_white, c_white, c_ltgray, c_ltgray, c_black, 1, ft_ScoreValue, 1)

//Preen Display
PreenText = 600
draw_text_outline(900 , PreenText, "Preen", c_ltgray, c_black, 1, ft_HUDText, 1)

//Preen Total counter
PreenTot = string_repeat("0", 6 - string_length(string(floor(global.PreenTotal)))) + string(global.PreenTotal)
for (var i = string_length(PreenTot) - 2; i &gt; 1; i -= 3)
    {
    PreenTot = string_insert(",", PreenTot, i);
    }

draw_text_outline_coloured(875, PreenText + 20, string(PreenTot), c_white, c_white, c_ltgray, c_ltgray, c_black, 1, ft_ScoreValue, 1)

//Preen Chain counter
PreenChain = string_repeat("0", 6 - string_length(string(floor(global.PreenChain)))) + string(global.PreenChain)
for (var i = string_length(PreenChain) - 2; i &gt; 1; i -= 3)
    {
    PreenChain = string_insert(",", PreenChain, i);
    }

draw_text_outline_coloured(875, PreenText + 50 , "Current Chain", c_white, c_white, c_ltgray, c_ltgray, c_black, 1, ft_SmallPreenText, 1)
draw_text_outline_coloured(875 + 15, PreenText + 50 + 20, string(PreenChain), c_white, c_white, c_ltgray, c_ltgray, c_black, 1, ft_FPS, 1)

//Multiplier
draw_text_outline_coloured(205, 768 - 45,string_format(DisplayMultiplier, 1, 1), c_white, c_white, c_ltgray, c_ltgray, c_black, 1, ft_ScoreMultiplier, 1)


if DisplayMultiplier &lt; global.PreenPointMultiply
{
    DisplayMultiplier += 0.05
}

if DisplayMultiplier &gt; global.PreenPointMultiply
{
    DisplayMultiplier -= 0.05
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lives and Bombs

    //Life Crystal Icons
    //draw_text_outline(1024 - 180, 200, "Lives:", make_colour_rgb(231, 097, 254), c_black, 1, ft_HUDText, 1)
    draw_text_outline_coloured(1024 - 180, 200, "Lives:", make_colour_hsv(200, 150, 255), make_colour_hsv(200, 150, 255), make_colour_hsv(200, 100, 255), make_colour_hsv(200, 100, 255), c_black, 1, ft_HUDText, 1)
    xx = 839
    yy = 230
    spr = spr_PlayerIcon
    spacing = sprite_get_width(spr) + 2
    repeat 10
    {
        draw_sprite(spr,0,xx,yy)
        xx += spacing
    }

    xx = 839
    yy = 230
    spr = spr_PlayerIcon
    spacing = sprite_get_width(spr) + 2
    repeat global.LifeCrystals
    {
        draw_sprite(spr,1,xx,yy)
        xx += spacing
    }

    //Life Extend
    if LifeExtendDisplay = true
    {
        LifeText = instance_create(x, y, obj_Extend) 
        LifeText.image_index = 0
        LifeExtendDisplay = false
    }
    
    //Spell Crystal Icons
    //draw_text_outline(1024 - 180, 275 - 16, "Spells:", make_colour_rgb(97, 168, 255), c_black, 1, ft_HUDText, 1)
    draw_text_outline_coloured(1024 - 180, 275 - 16, "Spells:", make_colour_hsv(150, 150, 255), make_colour_hsv(150, 150, 255), make_colour_hsv(150, 100, 255), make_colour_hsv(150, 100, 255), c_black, 1, ft_HUDText, 1)
    xx = 839
    yy = 305 - 16
    spr = spr_PlayerIcon
    spacing = sprite_get_width(spr) + 2
    repeat 10
    {
        draw_sprite(spr,0,xx,yy)
        xx += spacing
    }

    xx = 839
    yy = 305 - 16
    spr = spr_PlayerIcon
    spacing = sprite_get_width(spr) + 2
    repeat global.SpellCrystals
    {
        draw_sprite(spr,2,xx,yy)
        xx += spacing
    }

    //Bomb Extend
    if SpellExtendDisplay = true
    {
        SpellText = instance_create(x, y, obj_Extend) 
        SpellText.image_index = 1
        SpellExtendDisplay = false
    }
    
    if global.LastWord = true
    {
        xx = 839
        yy = 305 - 16
        spr = spr_Locked
        spacing = sprite_get_width(spr) + 2
        repeat 10
        {
            draw_sprite(spr,0,xx,yy)
            xx += spacing
        }
    
        xx = 839
        yy = 230
        spr = spr_Locked
        spacing = sprite_get_width(spr) + 2
        repeat 10
        {
            draw_sprite(spr,0,xx,yy)
            xx += spacing
        }
    }    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Difficulty Display
if global.Diff = "Easy"
{
    draw_sprite_ext(spr_Diff, 0, DiffX, DiffY, 1 ,DiffScale, 0, c_white, 1)
}

if global.Diff = "Normal"
{
    draw_sprite_ext(spr_Diff, 1, DiffX, DiffY, 1 ,DiffScale, 0, c_white, 1)
}

if global.Diff = "Hard"
{
   draw_sprite_ext(spr_Diff, 2, DiffX, DiffY, 1 ,DiffScale, 0, c_white, 1)
}

if global.Diff = "Flightless"
{
    draw_sprite_ext(spr_Diff, 3, DiffX, DiffY, 1 ,DiffScale, 0, c_white, 1)
}

if global.Diff = "Epilogue"
{
    draw_sprite_ext(spr_Diff, 4, DiffX, DiffY, 1 ,DiffScale, 0, c_white, 1)
}

if DiffTimer &lt; 120
    {
        DiffTimer += 1
    }
    else
    {
        if DiffPhase = 0
        {
            if DiffScale &gt; 0
            {
                DiffScale -= 0.05
            }else{
            DiffPhase = 1
            }
        }
        
        if DiffPhase = 1
        {
            DiffX = 832 + 192/2
            DiffY = 30
            if DiffScale &lt; 1
            {
                DiffScale += 0.05
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>StartUp effect</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///StartupFade
if BOAlpha &gt; 0
{
    draw_sprite_ext(spr_BlackedoutHud, 0, 1024/2, 768/2, 1, 1, 0, c_white, BOAlpha)
}
//if global.Pause = false
    //{
    if BOTimer &lt; 1
    {
        BOTimer += 1
    }
    else
    {
        if BOAlpha &gt; 0
        {
            BOAlpha -= 0.03
            if BOScale &gt; 0
            {
                BOScale -= 0.01  
            }
        
            if BOScaleIncrease &lt; 1
            {
                BOScaleIncrease += 0.1
            }
            
            BOAngle += BOScaleIncrease
            BOAngle = BOAngle % 360
        }
    }
//}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
