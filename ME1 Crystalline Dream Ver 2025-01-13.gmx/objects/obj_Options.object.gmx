<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_OptionsIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-31</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>KillSwitch = false

MenuAvali = false
Scale = 0

MenuMaxOptions = 4

OptionNumber = 0
Opt = 0

OptionName[0] = "Game BGM: "
OptionName[1] = "Game SFX: "
OptionName[2] = "Player SFX: "
OptionName[3] = "Language: "
OptionName[4] = "Exit"

menuVal[0] = global.VolBGM*100
menuVal[1] = global.VolSFX*100 
menuVal[2] = global.VolPlSFX*100
menuVal[3] = ""
menuVal[4] = ""

StartXpos = 250
StartYpos = 280
color = make_colour_rgb(234, 199, 255)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_MainMenu)
{
    with(obj_MainMenu)
    {
        //OptionNumber = OptionNumber
        SelectActive = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Values
BGMDisplay = string_format(global.VolBGM*1000, 3, 0)
SFXDisplay = string_format(global.VolSFX*100, 3, 0)
PlSFXDisplay = string_format(global.VolPlSFX*100, 3, 0)

menuVal[0] = BGMDisplay
menuVal[1] = SFXDisplay
menuVal[2] = PlSFXDisplay
menuVal[3] = ""
menuVal[4] = ""

if KillSwitch = false //if the  Exit Button is pressed
{

if keyboard_check_pressed(vk_down)
{
    if OptionNumber &lt; MenuMaxOptions
    {
        OptionNumber += 1
    }
}

if keyboard_check_pressed(vk_up)
{
    if OptionNumber &gt; 0
    {
        OptionNumber -= 1
    }
}

if keyboard_check_pressed(ord("Z"))
{
    if OptionNumber = 4
    {
        KillSwitch = true
        ini_open("Settings.ini")
        ini_write_real("Options", "BGMVol", global.VolBGM)
        ini_write_real("Options", "SFXVol", global.VolSFX)
        ini_write_real("Options", "PlayerSFX", global.VolPlSFX)
        ini_write_real("Options", "Language", global.Language)
        ini_close()
    }
}

if keyboard_check_pressed(vk_left)
{
    if OptionNumber = 0
    {
        if global.VolBGM &gt; 0
        {
            global.VolBGM -= 0.01
        }
        else
        {
            global.VolBGM = 0
        }
    }
    
    if OptionNumber = 1
    {
        if global.VolSFX &gt; 0
        {
            global.VolSFX -= 0.1
        }
        else
        {
            global.VolSFX = 0
        }
    }
    
    if OptionNumber = 2
    {
        if global.VolPlSFX &gt; 0
        {
            global.VolPlSFX -= 0.1
        }
        else
        {
            global.VolPlSFX = 0
        }
    }
    
    if OptionNumber = 3
    {
        global.Language =! global.Language
    }
}

if keyboard_check_pressed(vk_right)
{
    if OptionNumber = 0
    {
        if global.VolBGM &lt; 0.1
        {
            global.VolBGM += 0.01
        }
    }
    
    if OptionNumber = 1
    {
        if global.VolSFX &lt; 1
        {
            global.VolSFX += 0.1
        }
    }
    
    if OptionNumber = 2
    {
        if global.VolPlSFX &lt; 1
        {
            global.VolPlSFX += 0.1
        }
    }
    
    if OptionNumber = 3
    {
        global.Language =! global.Language
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu desplay
// Animation stuff
if KillSwitch = false //if the  Exit Button is pressed
{
    if MenuAvali = false
    {
        if Scale &lt; 1
        {
            Scale += 1/10
        }
    }
}
else
{
    if Scale &gt; 0
    {
        Scale -= 1/10
        if instance_exists(obj_MainMenu)
        {
            with(obj_MainMenu)
            {
                OptXscale[OptionNumber] += 1/10
            }
        }
    }
    else
    {
        instance_destroy()
    }
}

// Main draw events
draw_sprite_ext(spr_OptionsMenu, 0, 512, 384, Scale, 1, 0, c_white, 0.8)
draw_sprite_ext(spr_MainMenuText, 3, 330, 240, Scale, 1, 0, c_white, 0.8)

Opt = 0

repeat(MenuMaxOptions+1)
{
    if Opt = OptionNumber
    {
        draw_text_outline_coloured(StartXpos, StartYpos+(30*Opt), string(OptionName[Opt]), c_white, c_white, color, color, c_black, 1, ft_MenuOption, Scale)
        draw_text_outline_coloured(StartXpos+200, StartYpos+(30*Opt), string(menuVal[Opt]), c_white, c_white, color, color, c_black, 1, ft_MenuOption, Scale)
        
        if OptionNumber &lt; 3
        {
            draw_text_outline_coloured(StartXpos+200, StartYpos+(30*Opt), string(menuVal[Opt])+"%", c_white, c_white, color, color, c_black, 1, ft_MenuOption, Scale)
            draw_text_outline_coloured(StartXpos+180, StartYpos+(30*Opt), "&lt;           &gt;", c_white, c_white, color, color, c_black, 1, ft_MenuOption, Scale)
        }   
    }
    else
    {
        draw_text_outline_coloured(StartXpos, StartYpos+(30*Opt), string(OptionName[Opt]), c_gray, c_gray, c_dkgray, c_dkgray, c_black, 1, ft_MenuOption, Scale)
        draw_text_outline_coloured(StartXpos+200, StartYpos+(30*Opt), string(menuVal[Opt]), c_gray, c_gray, c_dkgray, c_dkgray, c_black, 1, ft_MenuOption, Scale)
    } 
     
    
    Opt ++
}

// = Language Flags =
FY = 118
FX = 20
if OptionNumber = 3
{
    if global.Language = 0
    {
        draw_sprite_ext(spr_LanguageFlags, 0, StartXpos+200+FX, StartYpos+FY, 1, 1, 0, c_white, Scale)
        draw_sprite_ext(spr_LanguageFlags, 1, StartXpos+245+FX, StartYpos+FY, 1, 1, 0, c_dkgray, Scale)
    }
    else
    {
        draw_sprite_ext(spr_LanguageFlags, 0, StartXpos+200+FX, StartYpos+FY, 1, 1, 0, c_dkgray, Scale)
        draw_sprite_ext(spr_LanguageFlags, 1, StartXpos+245+FX, StartYpos+FY, 1, 1, 0, c_white, Scale)
    }
}
else
{
    if global.Language = 0
    {
        draw_sprite_ext(spr_LanguageFlags, 0, StartXpos+200+FX, StartYpos+FY, 1, 1, 0, c_gray, Scale)
        draw_sprite_ext(spr_LanguageFlags, 1, StartXpos+245+FX, StartYpos+FY, 1, 1, 0, c_dkgray, Scale)
    }
    else
    {
        draw_sprite_ext(spr_LanguageFlags, 0, StartXpos+200+FX, StartYpos+FY, 1, 1, 0, c_dkgray, Scale)
        draw_sprite_ext(spr_LanguageFlags, 1, StartXpos+245+FX, StartYpos+FY, 1, 1, 0, c_gray, Scale)
    }
}
// ======
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
