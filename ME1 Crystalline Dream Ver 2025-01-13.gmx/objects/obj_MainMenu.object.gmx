<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MenuIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init background
global.SpellcardType = "NonSpell"

EffectEmmit = 0

GlowOpacity = 0
Scale = 1

GlowSwitchActive = true
GlowShift = false

Rotato = 0
RotAmmount = 0
Demo1 = 0
Demo2 = 0

var i = 0;
repeat(10)
{
    
    OptDir[i] = 0
    OptMove[i] = lengthdir_x(10, 0)
    OptShake[i] = 0
    OptXscale[i] = 1
    i ++
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu variables
Debug = false

MainGameWait = 0

NextOpt = vk_right
PrevOpt = vk_left

SelectActive = true

Optalpha = 0

Selected = false
Menuchange = 0

MenuNumber = "Main Menu"
OptionNumber = 0

MenuMaxOptions = 10


// Character select
MiddyScale = 0
AlexScale = 0

SelectScale = 1
MenuPause = 0

// Diff Select

DBAlpha = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Selection 

if keyboard_check(ord("D")) and keyboard_check(vk_shift)
{
    room_goto(room_TestStage)
}

if keyboard_check_pressed(PrevOpt) 
{
    if OptionNumber != 0 and Selected = false and SelectActive = true
    {
        Play_Sound_Fancy(snd_MenuJingle,global.VolSFX/2)
        OptionNumber -= 1
        if MenuNumber = "Main Menu" and OptionNumber = 1
        {
            if global.ExtraUnlocked = false
            {
                OptionNumber -= 1
            }
        }
    }
}

if keyboard_check_pressed(NextOpt)
{
    if OptionNumber != MenuMaxOptions and Selected = false and SelectActive = true
    {
        Play_Sound_Fancy(snd_MenuJingle,global.VolSFX/2)
        OptionNumber += 1   
    
        if MenuNumber = "Main Menu" and OptionNumber = 1
        {
            if global.ExtraUnlocked = false
            {
                OptionNumber += 1
            }
        }
    }
}

if keyboard_check_pressed(ord("Z")) and Selected = false and SelectActive = true
{
    Play_Sound_Fancy(snd_OptionSelected,global.VolSFX/2)
    
    SelectActive = false
    
    Selected = true 
   
    if MenuNumber = "Main Menu"
    {
        // TThe events are done in "Options Draw (Main menu)"
        if OptionNumber = 3 { } // Quit
        if OptionNumber = 4 { game_end() } // Quit
    }
    
    if MenuNumber = "Difficulty Select"
    {
        if OptionNumber = 0 
        { 
            global.Diff = "Easy" 
            global.HiScore = ds_grid_get(global.Scoreboard[OptionNumber], 1, 0)
        }
        if OptionNumber = 1 
        { 
            global.Diff = "Normal" 
            global.HiScore = ds_grid_get(global.Scoreboard[OptionNumber], 1, 0)
        }
        
        if OptionNumber = 2 
        { 
            global.Diff = "Hard" 
            global.HiScore = ds_grid_get(global.Scoreboard[OptionNumber], 1, 0)
        }
        
        if OptionNumber = 3 
        { 
            global.Diff = "Flightless" 
            global.HiScore = ds_grid_get(global.Scoreboard[OptionNumber], 1, 0)
        }


        
        obj_CloudCurtains.FullCloseTransiton = true
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Background
///Background drawing
if MenuNumber = "Main Menu" //Main Menu
{
    background_index = Back_MainMenu
    draw_sprite_ext(spr_MainMenuForground, 0, 0, 0, 1, 1, 0, c_white, 1)

    //Glow 
    draw_sprite_ext(spr_MainMenuGlow1, 0, 0, 0, 1, 1, 0, c_white, GlowOpacity) //Glow

    if GlowSwitchActive = true
    {
        if GlowShift = false
        {
            if GlowOpacity &lt; 1
            {
                GlowOpacity += 1/240
            }
            else
            {
                GlowShift = true
            }
        }
    
        if GlowShift = true
        {
            if GlowOpacity &gt; 0
            {
                GlowOpacity -= 1/240
            }
            else
            {
                GlowShift = false
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>== Menu Main Body ====</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options Draw (Main menu)
if MenuNumber = "Main Menu" 
{
    NextOpt = vk_right
    PrevOpt = vk_left
    
    //== Particle Emmitter ==
    if instance_exists(obj_LeavesMainmenu)
    {
        with(obj_LeavesMainmenu)
        {
            depth = 1
            image_alpha = 1
            if direction &gt; 270
            {
                direction = random_range(230, 260)
            }
        }
    }
    
    EffectEmmit += 1
    EffectEmmit = EffectEmmit % 60
    if EffectEmmit = 1
    {
        repeat(1)
        {
            leaf = instance_create(random_range(10, 1024-10), -50, obj_LeavesMainmenu)
            leaf.depth = 1
            leaf.direction = random_range(230, 260)
        }
    }

    // == == == ==

    MenuMaxOptions = 4
    
    var Opt = 0;
    
    //menu Vibrate
    if keyboard_check_pressed(PrevOpt) or keyboard_check_pressed(NextOpt)
    {
        OptShake[OptionNumber] = 10
    }
    
    if OptShake[OptionNumber] != 0
    {
        OptShake[OptionNumber] -= 10/10
    }
    
    //Selected animation
    if Selected = true 
    {
        if OptXscale[OptionNumber] &gt; 0
        {
            OptXscale[OptionNumber] -= 1/10
        }
        else
        {
            if Menuchange &lt; 30 //Stops you from selecting rapidly and waiting for the transition to finish
            {
                Menuchange += 1
                if Menuchange = 1
                {
                    if OptionNumber = 0 //Which background transition will use  
                    {
                        trans = instance_create(512,386,obj_MenuTransiton)
                        trans.DrawSprite = spr_CharacterSelectFull
                    }
                    
                    if OptionNumber = 2
                    {
                         instance_create(0, 0, obj_Diary)
                    }
                    
                    if OptionNumber = 3
                    {
                         instance_create(0, 0, obj_Options)
                    }
                }
            }
            else
            {
                Selected = false
                Menuchange = 0
                if OptionNumber = 0 //Moves to selected menu
                {
                    MenuNumber = "Character Select"
                    OptionNumber = 0
                } 
            }
        }
    }
    
    //Main menu
    repeat(MenuMaxOptions+1)
    {
        if Opt = OptionNumber
        {
            OptDir[OptionNumber] += 1
            OptDir[OptionNumber] = OptDir[OptionNumber] % 360
            OptMove[OptionNumber] = lengthdir_x(5, OptDir[OptionNumber])
        
           draw_sprite_ext(spr_MainMenuText, Opt, 130+(200*Opt), 720+OptMove[OptionNumber]+random_range(-OptShake[OptionNumber],OptShake[OptionNumber]), OptXscale[OptionNumber], 1, 0, c_white, 1)
        }
        else
        {
            //Extra stage unlocked or not?
            if global.ExtraUnlocked = false
            {
                if Opt = 1
                {
                    draw_sprite_ext(spr_MainMenuText, Opt+5, 130+(200*Opt), 720, 1, 1, 0, c_gray, 1)
                }
                else
                {
                    draw_sprite_ext(spr_MainMenuText, Opt+5, 130+(200*Opt), 720, 1, 1, 0, c_white, 1)
                }
            }
            else
            {
                draw_sprite_ext(spr_MainMenuText, Opt+5, 130+(200*Opt), 720, 1, 1, 0, c_white, 1)
            }
            
        }  
        Opt ++
    }
    //====
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options Draw (Character Select)
if MenuNumber = "Character Select" 
{
    NextOpt = vk_right
    PrevOpt = vk_left
    
    //== Particle Emmitter ==
    if instance_exists(obj_LeavesMainmenu)
    {
        with(obj_LeavesMainmenu)
        {
            depth = -1
            image_alpha = 0.5
            if direction &lt; 270
            {
                direction = random_range(280, 300)
            }
        }
    }
    
    EffectEmmit += 1
    EffectEmmit = EffectEmmit % 60
    if EffectEmmit = 1
    {
        repeat(1)
        {
            leaf = instance_create(random_range(10, 1024-10), -50, obj_LeavesMainmenu)
            leaf.depth = -1
            leaf.image_alpha = 0.5
            leaf.direction = random_range(280, 300)
        }
    }

    // == == == ==

    MenuMaxOptions = 1
    PlayertextXpos = 630
    PlayertextYpos = 670
    menuDec = vk_down
    menuInc = vk_up

    // Go back to main menu
    if keyboard_check_pressed(ord("X"))
    {
        Play_Sound_Fancy(snd_OptionBack,global.VolSFX/2)
        
        MenuNumber = "Main Menu"
        OptionNumber = 0
        Optalpha = 0
        
        MiddyScale = 0
        AlexScale = 0
        
        SelectActive = true
        
        // Reset previous menu
        var i = 0;
        repeat(10)
        {
            OptShake[i] = 0
            OptXscale[i] = 1
            i ++
        }
        //=====
    }
    // ======
    
    // == Selection ==
    if Selected = true
    {
        if MenuPause &lt; 10
        {
            MenuPause += 1
            
            if SelectScale &gt; 0 
            { 
                SelectScale -= 1/10
                if MiddyScale &gt; 0 {MiddyScale -= 1/10}
                if AlexScale &gt; 0 {AlexScale -= 1/10}

            }
            
            if DBAlpha &lt; 1
            {
                DBAlpha += 1/10
            }
            
        }
        else
        {
            if OptionNumber = 0 //Midnight
            {
                OptionNumber = 0
                MenuNumber = "Difficulty Select" 
                global.Player = "Midnight"
            } 
        
            if OptionNumber = 1 //Alex
            {    
                OptionNumber = 0
                MenuNumber = "Difficulty Select" 
                global.Player = "Alex"
            }
            
            Selected = false
            MenuPause = 0
        } 
    }
    else
    {
        if SelectScale &lt; 1 { SelectScale += 1/10 }
    }
    // =====
    
    // Menu
    draw_sprite(spr_CharacterSelectFull, 0, 0, 0)
    
    if Optalpha &lt; 1
    {
        Optalpha += 1/10
        draw_sprite_ext(spr_CharacterSelectChar, 0, 0, 0, 1,1, 0, c_white, 1)
        draw_sprite_ext(spr_CharacterSelectChar, 1, 0, 0, 1,1, 0, c_white, 1)
    }
    else
    {
        SelectActive = true
    }
    
    if OptionNumber = 0 // Middy
    {
        draw_sprite_ext(spr_CharacterSelectChar, 2, 0, 0, 1,1, 0, c_white, Optalpha-DBAlpha)
        draw_sprite_ext(spr_CharacterSelectChar, 0, 0, 0, 1,1, 0, c_white, Optalpha)
        
        draw_sprite_ext(spr_CharacterSelectChar, 1, 0, 0, 1,1, 0, c_gray, Optalpha-DBAlpha)
        
        if Selected = false
        {
            if MiddyScale &lt; 1
            {
                MiddyScale += 1/10
                if AlexScale &gt; 0 {AlexScale -= 1/10}
            }
        }
        
        draw_sprite_ext(spr_MiddyText, 0, PlayertextXpos, PlayertextYpos, MiddyScale ,1, 0, c_white, 1)
        draw_sprite_ext(spr_MiddyText, 1, PlayertextXpos, PlayertextYpos, AlexScale ,1, 0, c_white, 1)
    }
    
    if OptionNumber = 1 // Alex
    {
        draw_sprite_ext(spr_CharacterSelectChar, 3, 0, 0, 1,1, 0, c_white, Optalpha-DBAlpha)
        draw_sprite_ext(spr_CharacterSelectChar, 1, 0, 0, 1,1, 0, c_white, Optalpha)
        
        draw_sprite_ext(spr_CharacterSelectChar, 0, 0, 0, 1,1, 0, c_gray, Optalpha-DBAlpha)
        
        if Selected = false
        {
            if AlexScale &lt; 1
            {
                AlexScale += 1/10
                if MiddyScale &gt; 0 {MiddyScale -= 1/10}
            }
        }
        
        draw_sprite_ext(spr_MiddyText, 0, PlayertextXpos, PlayertextYpos, MiddyScale ,1, 0, c_white, 1)
        draw_sprite_ext(spr_MiddyText, 1, PlayertextXpos, PlayertextYpos, AlexScale ,1, 0, c_white, 1)
    }
    
    draw_sprite(spr_CharacterSelectForground, 0, 0, 0)
    
    draw_sprite_ext(spr_CharacterSelectBackground, 1, 0, 0, 1, 1, 0, c_white, DBAlpha)
    draw_sprite_ext(spr_MenuBoarder, 0, 512, 125, 1, 1, 0, c_white, 0.5)
    draw_sprite_ext(spr_Blackbacker, 1, 0, 0, 1, 1, 0, c_white, DBAlpha-0.5)
    draw_sprite_ext(spr_PlayerSelectText, 0, 512, 125, SelectScale, 1, 0, c_white, 1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options Draw (Difficulty Select)
if MenuNumber = "Difficulty Select" 
{
    NextOpt = vk_down
    PrevOpt = vk_up
    
    background_index = back_Character
    
    //== Particle Emmitter ==
    if instance_exists(obj_LeavesMainmenu)
    {
        with(obj_LeavesMainmenu){depth = 1}
    }
    
    EffectEmmit += 1
    EffectEmmit = EffectEmmit % 60
    if EffectEmmit = 1
    {
        repeat(1)
        {
            leaf = instance_create(random_range(10, 1024-10), -50, obj_LeavesMainmenu)
            leaf.depth = 1
            leaf.direction = random_range(280, 300)
        }
    }

    // == == == ==
    
    MenuMaxOptions = 3

    // Base menu stuff
    //draw_sprite_ext(spr_CharacterSelectFull, 0, 0, 0, 1, 1, 0, c_white, 1)
    //draw_sprite_ext(spr_CharacterSelectBackground, 1, 0, 0, 1, 1, 0, c_white, DBAlpha)
    
    draw_sprite_ext(spr_Blackbacker, 1, 0, 0, 1, 1, 0, c_white, DBAlpha-0.5)
    
    draw_sprite_ext(spr_MenuBoarderLarge, 0, 0, 0, 1, 1, 0, c_white, DBAlpha-0.7)
    draw_sprite_ext(spr_MenuBoarder, 0, 280, 125, 1, 1, 0, c_white, 0.5)
    draw_sprite_ext(spr_DiffSelectText, 0, 280, 125, SelectScale, 1, 0, c_white, 1)
    
    Colour1 = c_white
    Colour2 = make_colour_rgb(234, 199, 255)
        
    draw_text_outline_coloured(650, 30, "You're playing as:", Colour1, Colour1, Colour2, Colour2, c_black, 1,ft_MenuTextSM, 1)
    
    if SelectScale &lt; 1
    {
        SelectScale += 1/10
    }
    
    Demo1 += 0.5
    Demo1 = Demo1 % 360
    Demo1Movementx = lengthdir_x(2, Demo1)
    Demo1Movementy = lengthdir_y(5, Demo1)
    
    Demo2 += 0.5
    Demo2 = Demo2  % 360
    Demo2Movementx = lengthdir_x(5, Demo2)
    Demo2Movementy = lengthdir_y(5, Demo2)
    
    if global.Player = "Midnight"
    {
        draw_sprite_ext(spr_MiddyText, 0, 750, 110, 0.6 ,0.6, 0, c_white, SelectScale)
        
        //Descriptions
        MiddyShotDes = "Middy's Shot type spreads out#  has a wide range and has#   great shotgunning potential!"
        draw_text_outline_coloured(750, 300, string(MiddyShotDes), Colour1, Colour1, Colour2, Colour2, c_black, 1,ft_MenuTextSMDesc, 1)
        
        MiddyBombDes = "Middy's Bomb, whilst#weak covers the whole#screen and lasts for#quite a while!"
        draw_text_outline_coloured(500,540, string(MiddyBombDes), Colour1, Colour1, Colour2, Colour2, c_black, 1,ft_MenuTextSMDesc, 1)
        
        //Picture demonstrations
        draw_sprite_ext(spr_ShotShowcase, 0, 600+Demo1Movementx, 350+Demo1Movementy, 0.6 ,0.6, 10, c_white, SelectScale)
        draw_sprite_ext(spr_ShotShowcase, 1, 850-Demo2Movementx, 600-Demo2Movementy, 0.6 ,0.6, -5, c_white, SelectScale)
        
        
    }
    else
    {
        draw_sprite_ext(spr_MiddyText, 1, 750, 110, 0.6 ,0.6, 0, c_white, SelectScale)
        
        //Descriptions
        MiddyShotDes = "Alex's Shot type is a peircing# forward shot with small#  drunk homing projectiles!"
        draw_text_outline_coloured(750, 300, string(MiddyShotDes), Colour1, Colour1, Colour2, Colour2, c_black, 1,ft_MenuTextSMDesc, 1)
        
        MiddyBombDes = "Alex's Bomb may have#limited range but#it is very quick and#powerful!"
        draw_text_outline_coloured(500,540, string(MiddyBombDes), Colour1, Colour1, Colour2, Colour2, c_black, 1,ft_MenuTextSMDesc, 1)
        
        //Picture demonstrations
        draw_sprite_ext(spr_ShotShowcase, 2, 600+Demo1Movementx, 350+Demo1Movementy, 0.6 ,0.6, 10, c_white, SelectScale)
        draw_sprite_ext(spr_ShotShowcase, 3, 850-Demo2Movementx, 600-Demo2Movementy, 0.6 ,0.6, -5, c_white, SelectScale)
    }
    
    // Go back to prev menu
    if keyboard_check_pressed(ord("X"))
    {
        Play_Sound_Fancy(snd_OptionBack,global.VolSFX/2)
        
        Selected = false
        MenuNumber = "Character Select"
        if global.Player = "Midnight" { OptionNumber = 0 }else{ OptionNumber = 1 }
        
        SelectScale = 1
        DBAlpha = 0
    }
    // ======
    
    // = Menu ===
    
    var Opt = 0;
    
    //menu Vibrate
    if keyboard_check_pressed(PrevOpt) or keyboard_check_pressed(NextOpt)
    {
        OptShake[OptionNumber] = 10
    }
    
    if OptShake[OptionNumber] != 0
    {
        OptShake[OptionNumber] -= 10/10
    }
    
    repeat(MenuMaxOptions+1)
    {
        
        if Opt = OptionNumber
        {
            StartXpos = 280 + random_range(-OptShake[OptionNumber],OptShake[OptionNumber])
            StartYpos = 300
            draw_sprite_ext(spr_MenuDifficulty, Opt+4, StartXpos, StartYpos+(125*Opt), 1, 1, 0, c_white, SelectScale)
            draw_sprite_ext(spr_MenuDifficulty, Opt, StartXpos, StartYpos+(125*Opt), 1, 1, 0, c_white, SelectScale)
        }
        else
        {
            draw_sprite_ext(spr_MenuDifficulty, Opt, 280, 300+(125*Opt), 1, 1, 0, c_gray, SelectScale)
        }  
        
        Opt ++
    }
    
    // ======
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options Draw (Diary)
if MenuNumber = "Diary" 
{
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>== Debug ===</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Location
if keyboard_check(vk_control)
{
    if keyboard_check_pressed(ord("D"))
    {
        Debug =! Debug
    }
}

if Debug = true
{
    draw_text_outline(25, 25, "MenuNumber: "+string(MenuNumber), c_white, c_black, 1, ft_YuTextSM, 1)
    draw_text_outline(25, 50, "MenuOption: "+string(OptionNumber), c_white, c_black, 1, ft_YuTextSM, 1)
    draw_text_outline(25, 75, "Character Select: "+string(global.Player), c_white, c_black, 1, ft_YuTextSM, 1)
    draw_text_outline(25, 100, "Difficulty Select: "+string(global.Diff), c_white, c_black, 1, ft_YuTextSM, 1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Beta Info
if MenuNumber = "Main Menu" and Debug = true
{
    draw_set_alpha(0.3)
    draw_rectangle_colour(20, 20, 512, 200, c_black, c_black, c_black, c_black,0)
    draw_set_alpha(1)
    
    draw_text_outline(30, 30, "Crystalline Dream: Now Main Menu Update!", c_white, c_black, 1, ft_MenuTextSMDesc, 1)
    
    draw_text_outline(30, 60, "- NEW MENU!!!!#- Tweaks to Alex and Middy's players#- Prolly alot more stuff!", c_white, c_black, 1, ft_MenuTextSMDesc, 1)
    
    draw_text_outline(30, 200-30, "Beta Ver: 21.05.20", c_white, c_black, 1, ft_MenuTextSMDesc, 1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
